
Sprint_10_escravo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000290  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000290  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000726  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000670  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052b  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008826  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bb  00000000  00000000  00009f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000a13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002c56  00000000  00000000  0000a165  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_18>:
//Função para envio de um frame de 5 a 8 bits
void USART_Transmit(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Espera limpeza do registrador de transmissão
	UDR0 = data;
}
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	86 ec       	ldi	r24, 0xC6	; 198
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	80 53       	subi	r24, 0x30	; 48
  cc:	0e 94 7d 00 	call	0xfa	; 0xfa <anima_semaforo>
  d0:	00 00       	nop
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <anima_semaforo>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	63 97       	sbiw	r28, 0x13	; 19
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	8b 8b       	std	Y+19, r24	; 0x13
 110:	22 e1       	ldi	r18, 0x12	; 18
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	dc 01       	movw	r26, r24
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	2a 95       	dec	r18
 122:	e1 f7       	brne	.-8      	; 0x11c <anima_semaforo+0x22>
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2b 89       	ldd	r18, Y+19	; 0x13
 12a:	22 2f       	mov	r18, r18
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	ae 01       	movw	r20, r28
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	24 0f       	add	r18, r20
 13a:	35 1f       	adc	r19, r21
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	31 81       	ldd	r19, Z+1	; 0x01
 142:	2f 77       	andi	r18, 0x7F	; 127
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	00 00       	nop
 14a:	63 96       	adiw	r28, 0x13	; 19
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	//Configurando entradas e saídas
	DDRB = 0b11111111;  //Todos os pinos B como saída
 164:	84 e2       	ldi	r24, 0x24	; 36
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	DDRD |= 0b10001000; //Pinos D3 e D7 como saída
 16e:	8a e2       	ldi	r24, 0x2A	; 42
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2a e2       	ldi	r18, 0x2A	; 42
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	28 68       	ori	r18, 0x88	; 136
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	PORTC &= 0b11111110; //Desabilitando o pull-up de C0
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	28 e2       	ldi	r18, 0x28	; 40
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2e 7f       	andi	r18, 0xFE	; 254
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
	PORTC |= 0b01000000; //Habilitando o pull-up de C6
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 e2       	ldi	r18, 0x28	; 40
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	20 64       	ori	r18, 0x40	; 64
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	PORTD |= 0b01111111; //Definindo os pinos de pull-up D4-D6
 1a4:	8b e2       	ldi	r24, 0x2B	; 43
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2b e2       	ldi	r18, 0x2B	; 43
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	2f 67       	ori	r18, 0x7F	; 127
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	
	//Cofigurando as interrupções
	EICRA  |= 0b00000010;//Interrupção por borda de subida de INT0
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	29 e6       	ldi	r18, 0x69	; 105
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	22 60       	ori	r18, 0x02	; 2
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	EIMSK  |= 0b00000001;//Habilita interrupção do INT0
 1c8:	8d e3       	ldi	r24, 0x3D	; 61
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	2d e3       	ldi	r18, 0x3D	; 61
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	21 60       	ori	r18, 0x01	; 1
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	PCICR  = 0b00000100;//Habilita interrupção pelos pinos D
 1da:	88 e6       	ldi	r24, 0x68	; 104
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	24 e0       	ldi	r18, 0x04	; 4
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	PCMSK2 = 0b01111111;//Habilita as interrupções dos pinos PD2,PD4, PD5 e PD6
 1e4:	8d e6       	ldi	r24, 0x6D	; 109
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	2f e7       	ldi	r18, 0x7F	; 127
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
	
	//Configurando timer 1ms
	TCCR0A = 0b00000010; //habilitando o modo CTC do TC0
 1ee:	84 e4       	ldi	r24, 0x44	; 68
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	22 e0       	ldi	r18, 0x02	; 2
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; //ligando com prescaler = 64
 1f8:	85 e4       	ldi	r24, 0x45	; 69
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	23 e0       	ldi	r18, 0x03	; 3
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
	OCR0A = 249; //Ajustando a contagem até 250
 202:	87 e4       	ldi	r24, 0x47	; 71
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	29 ef       	ldi	r18, 0xF9	; 249
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010; //Habilitando a interrupção na igualdade de comparação com OCR0A
 20c:	8e e6       	ldi	r24, 0x6E	; 110
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	22 e0       	ldi	r18, 0x02	; 2
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
	
	//Configurando o ADC
	ADMUX = 0b01000000; //Vcc como referência, canal 0
 216:	8c e7       	ldi	r24, 0x7C	; 124
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	20 e4       	ldi	r18, 0x40	; 64
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	ADCSRA = 0b11100111; //Habilita o AD, modo conversão contínua, prescaler = 128
 220:	8a e7       	ldi	r24, 0x7A	; 122
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	27 ee       	ldi	r18, 0xE7	; 231
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
	ADCSRB = 0b00000000; //Modo de conversão contínua
 22a:	8b e7       	ldi	r24, 0x7B	; 123
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	10 82       	st	Z, r1
	DIDR0 = 0b00000000; //Habilita o PC0 como entrada do ADC0
 232:	8e e7       	ldi	r24, 0x7E	; 126
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	10 82       	st	Z, r1
	
	//Configurando o PWM
	OCR2A = 255; //Ajustando periodo do PWM, TOP-1 = 16M/(244*256) = 256
 23a:	83 eb       	ldi	r24, 0xB3	; 179
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
	TCCR2A = 0b00100011; //PWM rápido, ativa PWM no OC2B não invertido
 244:	80 eb       	ldi	r24, 0xB0	; 176
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	23 e2       	ldi	r18, 0x23	; 35
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	TCCR2B = 0b00011010; //Prescale 256
 24e:	81 eb       	ldi	r24, 0xB1	; 177
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	2a e1       	ldi	r18, 0x1A	; 26
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
	OCR2B = 76; //Duty inical de 30%
 258:	84 eb       	ldi	r24, 0xB4	; 180
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2c e4       	ldi	r18, 0x4C	; 76
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
	
	//Configurando o USART
	UBRR0H = (unsigned char)(MYUBRR>>8); //Ajuste da taxa de transmissão
 262:	85 ec       	ldi	r24, 0xC5	; 197
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)MYUBRR;  //Ajuste da taxa de transmissão
 26a:	84 ec       	ldi	r24, 0xC4	; 196
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Habilita a transmissão e o recepção
 274:	81 ec       	ldi	r24, 0xC1	; 193
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	28 e9       	ldi	r18, 0x98	; 152
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	UCSR0C = (3<<UCSZ00);  //Ajusta o formato do frame: 8 bits de dados e 1 de parada, sem paridade
 27e:	82 ec       	ldi	r24, 0xC2	; 194
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	26 e0       	ldi	r18, 0x06	; 6
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	

	sei(); //Habilitando as interrupções
 288:	78 94       	sei
	while (1)
	{

	}
 28a:	ff cf       	rjmp	.-2      	; 0x28a <main+0x12e>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
