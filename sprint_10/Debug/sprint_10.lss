
sprint_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000023f8  0000248c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000211  00800148  00800148  000024d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f30  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bd  00000000  00000000  00003578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001118  00000000  00000000  00003e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00004f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008bdc  00000000  00000000  0000534c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bd  00000000  00000000  0000df28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000311c  00000000  00000000  0000e89d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ef       	ldi	r30, 0xF8	; 248
     25c:	f3 e2       	ldi	r31, 0x23	; 35
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a8 34       	cpi	r26, 0x48	; 72
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	a8 e4       	ldi	r26, 0x48	; 72
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a9 35       	cpi	r26, 0x59	; 89
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 93 08 	call	0x1126	; 0x1126 <main>
     27e:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_14>:
void leitura_ADC(uint8_t *flag_disparo);
void USART_Transmit(unsigned char data);
void passagem_trem(uint8_t *flag_fecha, uint8_t *flag_abre);
//Interrupção para contabilizar o tempo
ISR(TIMER0_COMPA_vect)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
	tempo_ms++;
     2b2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
     2b6:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
     2ba:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
     2be:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	a1 1d       	adc	r26, r1
     2c6:	b1 1d       	adc	r27, r1
     2c8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tempo_ms>
     2cc:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tempo_ms+0x1>
     2d0:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <tempo_ms+0x2>
     2d4:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <tempo_ms+0x3>
	if((tempo_ms % 5000) == 0)
     2d8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
     2dc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
     2e0:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
     2e4:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
     2e8:	28 e8       	ldi	r18, 0x88	; 136
     2ea:	33 e1       	ldi	r19, 0x13	; 19
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	89 2b       	or	r24, r25
     2fe:	8a 2b       	or	r24, r26
     300:	8b 2b       	or	r24, r27
     302:	19 f4       	brne	.+6      	; 0x30a <__vector_14+0x84>
	    flag_5000ms = 1; //Flag de 5 segundos para a contagem de carros
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <flag_5000ms>
	if((tempo_ms % 500) == 0)
     30a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
     30e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
     312:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
     316:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
     31a:	24 ef       	ldi	r18, 0xF4	; 244
     31c:	31 e0       	ldi	r19, 0x01	; 1
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	bc 01       	movw	r22, r24
     324:	cd 01       	movw	r24, r26
     326:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	89 2b       	or	r24, r25
     330:	8a 2b       	or	r24, r26
     332:	8b 2b       	or	r24, r27
     334:	19 f4       	brne	.+6      	; 0x33c <__vector_14+0xb6>
	   flag_500ms = 1;  //Flag de 500ms para iluminação
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <flag_500ms>
	if((tempo_ms % 60000) == 0)
     33c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
     340:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
     344:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
     348:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
     34c:	20 e6       	ldi	r18, 0x60	; 96
     34e:	3a ee       	ldi	r19, 0xEA	; 234
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	bc 01       	movw	r22, r24
     356:	cd 01       	movw	r24, r26
     358:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	89 2b       	or	r24, r25
     362:	8a 2b       	or	r24, r26
     364:	8b 2b       	or	r24, r27
     366:	19 f4       	brne	.+6      	; 0x36e <__vector_14+0xe8>
	   flag_fecha = 1; //Flag para fechar cancela
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <flag_fecha>
	if((tempo_ms % 70000) == 0)
     36e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
     372:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
     376:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
     37a:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
     37e:	20 e7       	ldi	r18, 0x70	; 112
     380:	31 e1       	ldi	r19, 0x11	; 17
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	bc 01       	movw	r22, r24
     388:	cd 01       	movw	r24, r26
     38a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	89 2b       	or	r24, r25
     394:	8a 2b       	or	r24, r26
     396:	8b 2b       	or	r24, r27
     398:	19 f4       	brne	.+6      	; 0x3a0 <__vector_14+0x11a>
	   flag_abre = 1; //Flag para abrir cancela
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <flag_abre>
	
}
     3a0:	00 00       	nop
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_1>:
//Contagem de carros que passam o sinal
ISR(INT0_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	carros++;
     3e2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <carros>
     3e6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <carros+0x1>
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <carros+0x1>
     3f0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <carros>
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_5>:

//Interrupção do funcionamento dos LEDs
ISR(PCINT2_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
	//Interrupção que altera qual dado está selecionado
	if((PIND & 0b01000000) == 0)
     428:	89 e2       	ldi	r24, 0x29	; 41
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	88 2f       	mov	r24, r24
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	80 74       	andi	r24, 0x40	; 64
     436:	99 27       	eor	r25, r25
     438:	89 2b       	or	r24, r25
     43a:	69 f4       	brne	.+26     	; 0x456 <__vector_5+0x4c>
	{
		if(selecao_parametro < (Size_enum_parametros-1))
     43c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	30 f4       	brcc	.+12     	; 0x450 <__vector_5+0x46>
		selecao_parametro++;
     444:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
			break;
		}
		
	}

}
     44e:	e8 c0       	rjmp	.+464    	; 0x620 <__vector_5+0x216>
	if((PIND & 0b01000000) == 0)
	{
		if(selecao_parametro < (Size_enum_parametros-1))
		selecao_parametro++;
		else
		selecao_parametro = Modo;
     450:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			break;
		}
		
	}

}
     454:	e5 c0       	rjmp	.+458    	; 0x620 <__vector_5+0x216>
		selecao_parametro++;
		else
		selecao_parametro = Modo;
	}
	//Interrupção que diminui em 1 segundo o sinal ou altera o modo
	else if((PIND & 0b00100000) == 0)
     456:	89 e2       	ldi	r24, 0x29	; 41
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	80 72       	andi	r24, 0x20	; 32
     464:	99 27       	eor	r25, r25
     466:	89 2b       	or	r24, r25
     468:	09 f0       	breq	.+2      	; 0x46c <__vector_5+0x62>
     46a:	65 c0       	rjmp	.+202    	; 0x536 <__vector_5+0x12c>
	{
		switch(selecao_parametro)
     46c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     470:	88 2f       	mov	r24, r24
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	81 30       	cpi	r24, 0x01	; 1
     476:	91 05       	cpc	r25, r1
     478:	a9 f0       	breq	.+42     	; 0x4a4 <__vector_5+0x9a>
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	1c f4       	brge	.+6      	; 0x486 <__vector_5+0x7c>
     480:	89 2b       	or	r24, r25
     482:	39 f0       	breq	.+14     	; 0x492 <__vector_5+0x88>
			break;
		}
		
	}

}
     484:	cd c0       	rjmp	.+410    	; 0x620 <__vector_5+0x216>
		selecao_parametro = Modo;
	}
	//Interrupção que diminui em 1 segundo o sinal ou altera o modo
	else if((PIND & 0b00100000) == 0)
	{
		switch(selecao_parametro)
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	91 05       	cpc	r25, r1
     48a:	21 f1       	breq	.+72     	; 0x4d4 <__vector_5+0xca>
     48c:	03 97       	sbiw	r24, 0x03	; 3
     48e:	d1 f1       	breq	.+116    	; 0x504 <__vector_5+0xfa>
			break;
		}
		
	}

}
     490:	c7 c0       	rjmp	.+398    	; 0x620 <__vector_5+0x216>
	else if((PIND & 0b00100000) == 0)
	{
		switch(selecao_parametro)
		{
			case Modo:
			semaforo.modo_am = !semaforo.modo_am;
     492:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	99 23       	and	r25, r25
     49a:	09 f0       	breq	.+2      	; 0x49e <__vector_5+0x94>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     4a2:	be c0       	rjmp	.+380    	; 0x620 <__vector_5+0x216>
			case Tempo_verde:
			if(semaforo.modo_am == 1)
     4a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__vector_5+0xa4>
     4ac:	ae c0       	rjmp	.+348    	; 0x60a <__vector_5+0x200>
			{
				if(semaforo.tempo_verde_ms >= 2000)
     4ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4b2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     4b6:	80 3d       	cpi	r24, 0xD0	; 208
     4b8:	97 40       	sbci	r25, 0x07	; 7
     4ba:	08 f4       	brcc	.+2      	; 0x4be <__vector_5+0xb4>
     4bc:	a6 c0       	rjmp	.+332    	; 0x60a <__vector_5+0x200>
				semaforo.tempo_verde_ms -= 1000;
     4be:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4c2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     4c6:	88 5e       	subi	r24, 0xE8	; 232
     4c8:	93 40       	sbci	r25, 0x03	; 3
     4ca:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     4ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			}
			break;
     4d2:	9b c0       	rjmp	.+310    	; 0x60a <__vector_5+0x200>
			case Tempo_vermelho:
			if(semaforo.modo_am == 1)
     4d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	09 f0       	breq	.+2      	; 0x4de <__vector_5+0xd4>
     4dc:	98 c0       	rjmp	.+304    	; 0x60e <__vector_5+0x204>
			{
				if(semaforo.tempo_vermelho_ms >= 2000)
     4de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     4e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     4e6:	80 3d       	cpi	r24, 0xD0	; 208
     4e8:	97 40       	sbci	r25, 0x07	; 7
     4ea:	08 f4       	brcc	.+2      	; 0x4ee <__vector_5+0xe4>
     4ec:	90 c0       	rjmp	.+288    	; 0x60e <__vector_5+0x204>
				semaforo.tempo_vermelho_ms -= 1000;
     4ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     4f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     4f6:	88 5e       	subi	r24, 0xE8	; 232
     4f8:	93 40       	sbci	r25, 0x03	; 3
     4fa:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     4fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			}
			break;
     502:	85 c0       	rjmp	.+266    	; 0x60e <__vector_5+0x204>
			case Tempo_amarelo:
			if(semaforo.modo_am == 1)
     504:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	09 f0       	breq	.+2      	; 0x50e <__vector_5+0x104>
     50c:	82 c0       	rjmp	.+260    	; 0x612 <__vector_5+0x208>
			{
				if(semaforo.tempo_amarelo_ms >= 2000)
     50e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     512:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     516:	80 3d       	cpi	r24, 0xD0	; 208
     518:	97 40       	sbci	r25, 0x07	; 7
     51a:	08 f4       	brcc	.+2      	; 0x51e <__vector_5+0x114>
     51c:	7a c0       	rjmp	.+244    	; 0x612 <__vector_5+0x208>
				semaforo.tempo_amarelo_ms -= 1000;
     51e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     522:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     526:	88 5e       	subi	r24, 0xE8	; 232
     528:	93 40       	sbci	r25, 0x03	; 3
     52a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     52e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
			}
			break;
     532:	00 00       	nop
     534:	6e c0       	rjmp	.+220    	; 0x612 <__vector_5+0x208>
		}
		
	}
	//Interrupção que aumenta em 1 segundo o sinal ou altera o modo
	else if((PIND & 0b00010000) == 0)
     536:	89 e2       	ldi	r24, 0x29	; 41
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	80 81       	ld	r24, Z
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	80 71       	andi	r24, 0x10	; 16
     544:	99 27       	eor	r25, r25
     546:	89 2b       	or	r24, r25
     548:	09 f0       	breq	.+2      	; 0x54c <__vector_5+0x142>
     54a:	6a c0       	rjmp	.+212    	; 0x620 <__vector_5+0x216>
	{
		switch(selecao_parametro)
     54c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	91 05       	cpc	r25, r1
     558:	a9 f0       	breq	.+42     	; 0x584 <__vector_5+0x17a>
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	91 05       	cpc	r25, r1
     55e:	1c f4       	brge	.+6      	; 0x566 <__vector_5+0x15c>
     560:	89 2b       	or	r24, r25
     562:	39 f0       	breq	.+14     	; 0x572 <__vector_5+0x168>
			break;
		}
		
	}

}
     564:	5d c0       	rjmp	.+186    	; 0x620 <__vector_5+0x216>
		
	}
	//Interrupção que aumenta em 1 segundo o sinal ou altera o modo
	else if((PIND & 0b00010000) == 0)
	{
		switch(selecao_parametro)
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	91 05       	cpc	r25, r1
     56a:	19 f1       	breq	.+70     	; 0x5b2 <__vector_5+0x1a8>
     56c:	03 97       	sbiw	r24, 0x03	; 3
     56e:	b9 f1       	breq	.+110    	; 0x5de <__vector_5+0x1d4>
			break;
		}
		
	}

}
     570:	57 c0       	rjmp	.+174    	; 0x620 <__vector_5+0x216>
	else if((PIND & 0b00010000) == 0)
	{
		switch(selecao_parametro)
		{
			case Modo:
			semaforo.modo_am = !semaforo.modo_am;
     572:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	99 23       	and	r25, r25
     57a:	09 f0       	breq	.+2      	; 0x57e <__vector_5+0x174>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     582:	4e c0       	rjmp	.+156    	; 0x620 <__vector_5+0x216>
			case Tempo_verde:
			if(semaforo.modo_am == 1)
     584:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	09 f0       	breq	.+2      	; 0x58e <__vector_5+0x184>
     58c:	44 c0       	rjmp	.+136    	; 0x616 <__vector_5+0x20c>
			{
				if(semaforo.tempo_verde_ms <= 8000)
     58e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     592:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     596:	81 34       	cpi	r24, 0x41	; 65
     598:	9f 41       	sbci	r25, 0x1F	; 31
     59a:	e8 f5       	brcc	.+122    	; 0x616 <__vector_5+0x20c>
				semaforo.tempo_verde_ms += 1000;
     59c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5a0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     5a4:	88 51       	subi	r24, 0x18	; 24
     5a6:	9c 4f       	sbci	r25, 0xFC	; 252
     5a8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     5ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			}
			break;
     5b0:	32 c0       	rjmp	.+100    	; 0x616 <__vector_5+0x20c>
			case Tempo_vermelho:
			if(semaforo.modo_am == 1)
     5b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	81 f5       	brne	.+96     	; 0x61a <__vector_5+0x210>
			{
				if(semaforo.tempo_vermelho_ms <= 8000)
     5ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     5be:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     5c2:	81 34       	cpi	r24, 0x41	; 65
     5c4:	9f 41       	sbci	r25, 0x1F	; 31
     5c6:	48 f5       	brcc	.+82     	; 0x61a <__vector_5+0x210>
				semaforo.tempo_vermelho_ms += 1000;
     5c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     5cc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     5d0:	88 51       	subi	r24, 0x18	; 24
     5d2:	9c 4f       	sbci	r25, 0xFC	; 252
     5d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     5d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			}
			break;
     5dc:	1e c0       	rjmp	.+60     	; 0x61a <__vector_5+0x210>
			case Tempo_amarelo:
			if(semaforo.modo_am == 1)
     5de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5e2:	81 30       	cpi	r24, 0x01	; 1
     5e4:	e1 f4       	brne	.+56     	; 0x61e <__vector_5+0x214>
			{
				if(semaforo.tempo_amarelo_ms <= 8000)
     5e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     5ea:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     5ee:	81 34       	cpi	r24, 0x41	; 65
     5f0:	9f 41       	sbci	r25, 0x1F	; 31
     5f2:	a8 f4       	brcc	.+42     	; 0x61e <__vector_5+0x214>
				semaforo.tempo_amarelo_ms += 1000;
     5f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     5f8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     5fc:	88 51       	subi	r24, 0x18	; 24
     5fe:	9c 4f       	sbci	r25, 0xFC	; 252
     600:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     604:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
			}
			break;
     608:	0a c0       	rjmp	.+20     	; 0x61e <__vector_5+0x214>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_verde_ms >= 2000)
				semaforo.tempo_verde_ms -= 1000;
			}
			break;
     60a:	00 00       	nop
     60c:	09 c0       	rjmp	.+18     	; 0x620 <__vector_5+0x216>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_vermelho_ms >= 2000)
				semaforo.tempo_vermelho_ms -= 1000;
			}
			break;
     60e:	00 00       	nop
     610:	07 c0       	rjmp	.+14     	; 0x620 <__vector_5+0x216>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_amarelo_ms >= 2000)
				semaforo.tempo_amarelo_ms -= 1000;
			}
			break;
     612:	00 00       	nop
     614:	05 c0       	rjmp	.+10     	; 0x620 <__vector_5+0x216>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_verde_ms <= 8000)
				semaforo.tempo_verde_ms += 1000;
			}
			break;
     616:	00 00       	nop
     618:	03 c0       	rjmp	.+6      	; 0x620 <__vector_5+0x216>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_vermelho_ms <= 8000)
				semaforo.tempo_vermelho_ms += 1000;
			}
			break;
     61a:	00 00       	nop
     61c:	01 c0       	rjmp	.+2      	; 0x620 <__vector_5+0x216>
			if(semaforo.modo_am == 1)
			{
				if(semaforo.tempo_amarelo_ms <= 8000)
				semaforo.tempo_amarelo_ms += 1000;
			}
			break;
     61e:	00 00       	nop
		}
		
	}

}
     620:	00 00       	nop
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	2f 91       	pop	r18
     630:	0f 90       	pop	r0
     632:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <anima_semaforo>:

//Função que determina o funcionamento do semáforo
void anima_semaforo(stc_semaforo Semaforo,uint32_t tempo_ms,uint8_t *flag_disparo)
{
     63c:	8f 92       	push	r8
     63e:	9f 92       	push	r9
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	a4 97       	sbiw	r28, 0x24	; 36
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	eb 8a       	std	Y+19, r14	; 0x13
     666:	fc 8a       	std	Y+20, r15	; 0x14
     668:	0d 8b       	std	Y+21, r16	; 0x15
     66a:	1e 8b       	std	Y+22, r17	; 0x16
     66c:	2f 8b       	std	Y+23, r18	; 0x17
     66e:	38 8f       	std	Y+24, r19	; 0x18
     670:	49 8f       	std	Y+25, r20	; 0x19
     672:	5a 8f       	std	Y+26, r21	; 0x1a
     674:	6b 8f       	std	Y+27, r22	; 0x1b
     676:	7c 8f       	std	Y+28, r23	; 0x1c
     678:	8d 8f       	std	Y+29, r24	; 0x1d
     67a:	9e 8f       	std	Y+30, r25	; 0x1e
     67c:	af 8e       	std	Y+31, r10	; 0x1f
     67e:	b8 a2       	std	Y+32, r11	; 0x20
     680:	c9 a2       	std	Y+33, r12	; 0x21
     682:	da a2       	std	Y+34, r13	; 0x22
     684:	9c a2       	std	Y+36, r9	; 0x24
     686:	8b a2       	std	Y+35, r8	; 0x23
	//Variáveis que auxiliam na operação, cada posição de "estados"
	//representa quantos leds acessos codificados em apenas 4 bits 
	const uint16_t estados[9] = {0b00000000, 0b00000001, 0b00001000, 0b00001001, 0b00010000, 0b00010001, 0b00011000, 0b00011001, 0b00100000};
     688:	22 e1       	ldi	r18, 0x12	; 18
     68a:	ec e0       	ldi	r30, 0x0C	; 12
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	dc 01       	movw	r26, r24
     694:	01 90       	ld	r0, Z+
     696:	0d 92       	st	X+, r0
     698:	2a 95       	dec	r18
     69a:	e1 f7       	brne	.-8      	; 0x694 <anima_semaforo+0x58>
	static uint8_t i_M = 0, i_E = 0, i_S = 0;
	static uint32_t Tempo_Ant_M = 0, Tempo_Ant_E = 0; //Variável auxiliar para o timer
	
	if(*flag_disparo)
     69c:	8b a1       	ldd	r24, Y+35	; 0x23
     69e:	9c a1       	ldd	r25, Y+36	; 0x24
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	88 23       	and	r24, r24
     6a6:	31 f0       	breq	.+12     	; 0x6b4 <anima_semaforo+0x78>
	{
		PORTB = 0b00010001;
     6a8:	85 e2       	ldi	r24, 0x25	; 37
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	21 e1       	ldi	r18, 0x11	; 17
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
				}
			}
	    }

     } 
}
     6b2:	2a c2       	rjmp	.+1108   	; 0xb08 <__stack+0x209>
	
	if(*flag_disparo)
	{
		PORTB = 0b00010001;
	}
	else if((PIND & 0b10000000)== 0) //Se a chave que representa oscilação for acionada o semáforo passa a piscar amarelo
     6b4:	89 e2       	ldi	r24, 0x29	; 41
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	fc 01       	movw	r30, r24
     6ba:	80 81       	ld	r24, Z
     6bc:	88 23       	and	r24, r24
     6be:	0c f4       	brge	.+2      	; 0x6c2 <anima_semaforo+0x86>
     6c0:	66 c0       	rjmp	.+204    	; 0x78e <anima_semaforo+0x152>
	{
		//A variável i_S representa os 2 estados do semáforo, apagado ou o led amarelo aceso
		if(i_S <= 0)
     6c2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <i_S.2183>
     6c6:	88 23       	and	r24, r24
     6c8:	79 f5       	brne	.+94     	; 0x728 <anima_semaforo+0xec>
		    //Quando i_S é 0, o circuito irá ficar aceso e a variável irá passar a ser 1
		    if((tempo_ms - Tempo_Ant_M) >= 500) 
     6ca:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Tempo_Ant_M.2184>
     6ce:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Tempo_Ant_M.2184+0x1>
     6d2:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Tempo_Ant_M.2184+0x2>
     6d6:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Tempo_Ant_M.2184+0x3>
     6da:	2f 8d       	ldd	r18, Y+31	; 0x1f
     6dc:	38 a1       	ldd	r19, Y+32	; 0x20
     6de:	49 a1       	ldd	r20, Y+33	; 0x21
     6e0:	5a a1       	ldd	r21, Y+34	; 0x22
     6e2:	79 01       	movw	r14, r18
     6e4:	8a 01       	movw	r16, r20
     6e6:	e8 1a       	sub	r14, r24
     6e8:	f9 0a       	sbc	r15, r25
     6ea:	0a 0b       	sbc	r16, r26
     6ec:	1b 0b       	sbc	r17, r27
     6ee:	d8 01       	movw	r26, r16
     6f0:	c7 01       	movw	r24, r14
     6f2:	84 3f       	cpi	r24, 0xF4	; 244
     6f4:	91 40       	sbci	r25, 0x01	; 1
     6f6:	a1 05       	cpc	r26, r1
     6f8:	b1 05       	cpc	r27, r1
     6fa:	b0 f0       	brcs	.+44     	; 0x728 <anima_semaforo+0xec>
		    {
			    PORTB = 0b00010000;
     6fc:	85 e2       	ldi	r24, 0x25	; 37
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	20 e1       	ldi	r18, 0x10	; 16
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
			    Tempo_Ant_M = tempo_ms;
     706:	8f 8d       	ldd	r24, Y+31	; 0x1f
     708:	98 a1       	ldd	r25, Y+32	; 0x20
     70a:	a9 a1       	ldd	r26, Y+33	; 0x21
     70c:	ba a1       	ldd	r27, Y+34	; 0x22
     70e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     712:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     716:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     71a:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
				i_S++;		
     71e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <i_S.2183>
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <i_S.2183>
		    }	
		if(i_S == 1)
     728:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <i_S.2183>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	09 f0       	breq	.+2      	; 0x732 <anima_semaforo+0xf6>
     730:	eb c1       	rjmp	.+982    	; 0xb08 <__stack+0x209>
		{
			//Quando i_S é 1, o semáforo apaga e fica assim por meio segundo, até ser aceso de novo
			if((tempo_ms-Tempo_Ant_M) >= 2000)
     732:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Tempo_Ant_M.2184>
     736:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Tempo_Ant_M.2184+0x1>
     73a:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Tempo_Ant_M.2184+0x2>
     73e:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Tempo_Ant_M.2184+0x3>
     742:	2f 8d       	ldd	r18, Y+31	; 0x1f
     744:	38 a1       	ldd	r19, Y+32	; 0x20
     746:	49 a1       	ldd	r20, Y+33	; 0x21
     748:	5a a1       	ldd	r21, Y+34	; 0x22
     74a:	79 01       	movw	r14, r18
     74c:	8a 01       	movw	r16, r20
     74e:	e8 1a       	sub	r14, r24
     750:	f9 0a       	sbc	r15, r25
     752:	0a 0b       	sbc	r16, r26
     754:	1b 0b       	sbc	r17, r27
     756:	d8 01       	movw	r26, r16
     758:	c7 01       	movw	r24, r14
     75a:	80 3d       	cpi	r24, 0xD0	; 208
     75c:	97 40       	sbci	r25, 0x07	; 7
     75e:	a1 05       	cpc	r26, r1
     760:	b1 05       	cpc	r27, r1
     762:	08 f4       	brcc	.+2      	; 0x766 <anima_semaforo+0x12a>
     764:	d1 c1       	rjmp	.+930    	; 0xb08 <__stack+0x209>
			{
				PORTB = 0b00111001;
     766:	85 e2       	ldi	r24, 0x25	; 37
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	29 e3       	ldi	r18, 0x39	; 57
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18
				Tempo_Ant_M = tempo_ms;
     770:	8f 8d       	ldd	r24, Y+31	; 0x1f
     772:	98 a1       	ldd	r25, Y+32	; 0x20
     774:	a9 a1       	ldd	r26, Y+33	; 0x21
     776:	ba a1       	ldd	r27, Y+34	; 0x22
     778:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     77c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     780:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     784:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
				i_S = 0;
     788:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <i_S.2183>
				}
			}
	    }

     } 
}
     78c:	bd c1       	rjmp	.+890    	; 0xb08 <__stack+0x209>
		}
	}
	else
	{
			//Operação para determinar o tempo de cada led aceso
	        PORTB = estados[i_M] & 0b01111111;
     78e:	85 e2       	ldi	r24, 0x25	; 37
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <i_M.2181>
     796:	22 2f       	mov	r18, r18
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	ae 01       	movw	r20, r28
     7a0:	4f 5f       	subi	r20, 0xFF	; 255
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	24 0f       	add	r18, r20
     7a6:	35 1f       	adc	r19, r21
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	2f 77       	andi	r18, 0x7F	; 127
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
		
		//Teste para determinar o tempo que cada led deve ficar aceso
		if(i_M <=3)
     7b4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     7b8:	84 30       	cpi	r24, 0x04	; 4
     7ba:	88 f5       	brcc	.+98     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		{
			if((tempo_ms - Tempo_Ant_M) >= (Semaforo.tempo_verde_ms/4))
     7bc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Tempo_Ant_M.2184>
     7c0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Tempo_Ant_M.2184+0x1>
     7c4:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Tempo_Ant_M.2184+0x2>
     7c8:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Tempo_Ant_M.2184+0x3>
     7cc:	2f 8d       	ldd	r18, Y+31	; 0x1f
     7ce:	38 a1       	ldd	r19, Y+32	; 0x20
     7d0:	49 a1       	ldd	r20, Y+33	; 0x21
     7d2:	5a a1       	ldd	r21, Y+34	; 0x22
     7d4:	28 1b       	sub	r18, r24
     7d6:	39 0b       	sbc	r19, r25
     7d8:	4a 0b       	sbc	r20, r26
     7da:	5b 0b       	sbc	r21, r27
     7dc:	8c 89       	ldd	r24, Y+20	; 0x14
     7de:	9d 89       	ldd	r25, Y+21	; 0x15
     7e0:	96 95       	lsr	r25
     7e2:	87 95       	ror	r24
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	cc 01       	movw	r24, r24
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	28 17       	cp	r18, r24
     7f0:	39 07       	cpc	r19, r25
     7f2:	4a 07       	cpc	r20, r26
     7f4:	5b 07       	cpc	r21, r27
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <anima_semaforo+0x1be>
     7f8:	91 c0       	rjmp	.+290    	; 0x91c <__stack+0x1d>
			{
				i_M++;
     7fa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <i_M.2181>
				Tempo_Ant_M = tempo_ms;
     804:	8f 8d       	ldd	r24, Y+31	; 0x1f
     806:	98 a1       	ldd	r25, Y+32	; 0x20
     808:	a9 a1       	ldd	r26, Y+33	; 0x21
     80a:	ba a1       	ldd	r27, Y+34	; 0x22
     80c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     810:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     814:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     818:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
     81c:	7f c0       	rjmp	.+254    	; 0x91c <__stack+0x1d>
			}
		}
		//Teste para o led amarelo
		else if(i_M <= 4)
     81e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     822:	85 30       	cpi	r24, 0x05	; 5
     824:	68 f5       	brcc	.+90     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
		{
			if((tempo_ms - Tempo_Ant_M) >= Semaforo.tempo_amarelo_ms)
     826:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Tempo_Ant_M.2184>
     82a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Tempo_Ant_M.2184+0x1>
     82e:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Tempo_Ant_M.2184+0x2>
     832:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Tempo_Ant_M.2184+0x3>
     836:	2f 8d       	ldd	r18, Y+31	; 0x1f
     838:	38 a1       	ldd	r19, Y+32	; 0x20
     83a:	49 a1       	ldd	r20, Y+33	; 0x21
     83c:	5a a1       	ldd	r21, Y+34	; 0x22
     83e:	28 1b       	sub	r18, r24
     840:	39 0b       	sbc	r19, r25
     842:	4a 0b       	sbc	r20, r26
     844:	5b 0b       	sbc	r21, r27
     846:	88 8d       	ldd	r24, Y+24	; 0x18
     848:	99 8d       	ldd	r25, Y+25	; 0x19
     84a:	cc 01       	movw	r24, r24
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	4a 07       	cpc	r20, r26
     856:	5b 07       	cpc	r21, r27
     858:	08 f4       	brcc	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     85a:	60 c0       	rjmp	.+192    	; 0x91c <__stack+0x1d>
			{
				i_M++;
     85c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     860:	8f 5f       	subi	r24, 0xFF	; 255
     862:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <i_M.2181>
				Tempo_Ant_M = tempo_ms;
     866:	8f 8d       	ldd	r24, Y+31	; 0x1f
     868:	98 a1       	ldd	r25, Y+32	; 0x20
     86a:	a9 a1       	ldd	r26, Y+33	; 0x21
     86c:	ba a1       	ldd	r27, Y+34	; 0x22
     86e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     872:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     876:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     87a:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
     87e:	4e c0       	rjmp	.+156    	; 0x91c <__stack+0x1d>
			}
		}
		//Teste para os leds vermelhos
		else if(i_M<=8)
     880:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     884:	89 30       	cpi	r24, 0x09	; 9
     886:	80 f5       	brcc	.+96     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
		{
			if((tempo_ms - Tempo_Ant_M) >=(Semaforo.tempo_vermelho_ms/4))
     888:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Tempo_Ant_M.2184>
     88c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Tempo_Ant_M.2184+0x1>
     890:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Tempo_Ant_M.2184+0x2>
     894:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Tempo_Ant_M.2184+0x3>
     898:	2f 8d       	ldd	r18, Y+31	; 0x1f
     89a:	38 a1       	ldd	r19, Y+32	; 0x20
     89c:	49 a1       	ldd	r20, Y+33	; 0x21
     89e:	5a a1       	ldd	r21, Y+34	; 0x22
     8a0:	28 1b       	sub	r18, r24
     8a2:	39 0b       	sbc	r19, r25
     8a4:	4a 0b       	sbc	r20, r26
     8a6:	5b 0b       	sbc	r21, r27
     8a8:	8e 89       	ldd	r24, Y+22	; 0x16
     8aa:	9f 89       	ldd	r25, Y+23	; 0x17
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
     8b4:	cc 01       	movw	r24, r24
     8b6:	a0 e0       	ldi	r26, 0x00	; 0
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	28 17       	cp	r18, r24
     8bc:	39 07       	cpc	r19, r25
     8be:	4a 07       	cpc	r20, r26
     8c0:	5b 07       	cpc	r21, r27
     8c2:	60 f1       	brcs	.+88     	; 0x91c <__stack+0x1d>
			{
				i_M++;
     8c4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <i_M.2181>
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <i_M.2181>
				Tempo_Ant_M = tempo_ms;
     8ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8d0:	98 a1       	ldd	r25, Y+32	; 0x20
     8d2:	a9 a1       	ldd	r26, Y+33	; 0x21
     8d4:	ba a1       	ldd	r27, Y+34	; 0x22
     8d6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     8da:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     8de:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     8e2:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
     8e6:	1a c0       	rjmp	.+52     	; 0x91c <__stack+0x1d>
			}
		}
		//Reiniciando a contagem de estados, voltando a ligar o sinal verde
		else
		{
			i_M = 0;
     8e8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <i_M.2181>
			Tempo_Ant_M = tempo_ms;
     8ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ee:	98 a1       	ldd	r25, Y+32	; 0x20
     8f0:	a9 a1       	ldd	r26, Y+33	; 0x21
     8f2:	ba a1       	ldd	r27, Y+34	; 0x22
     8f4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Tempo_Ant_M.2184>
     8f8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <Tempo_Ant_M.2184+0x1>
     8fc:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <Tempo_Ant_M.2184+0x2>
     900:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <Tempo_Ant_M.2184+0x3>
			Tempo_Ant_E = tempo_ms;  //Sincroniza os 2 semáforos
     904:	8f 8d       	ldd	r24, Y+31	; 0x1f
     906:	98 a1       	ldd	r25, Y+32	; 0x20
     908:	a9 a1       	ldd	r26, Y+33	; 0x21
     90a:	ba a1       	ldd	r27, Y+34	; 0x22
     90c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Tempo_Ant_E.2185>
     910:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Tempo_Ant_E.2185+0x1>
     914:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <Tempo_Ant_E.2185+0x2>
     918:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <Tempo_Ant_E.2185+0x3>
		}
		
		//Avanço de estados do Escravo
		if(i_E <=3)
     91c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     920:	84 30       	cpi	r24, 0x04	; 4
     922:	08 f0       	brcs	.+2      	; 0x926 <__stack+0x27>
     924:	4f c0       	rjmp	.+158    	; 0x9c4 <__stack+0xc5>
		{
			if((tempo_ms - Tempo_Ant_E) >= ((Semaforo.tempo_verde_ms + Semaforo.tempo_amarelo_ms)/4))
     926:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     92a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     92e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     932:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     936:	2f 8d       	ldd	r18, Y+31	; 0x1f
     938:	38 a1       	ldd	r19, Y+32	; 0x20
     93a:	49 a1       	ldd	r20, Y+33	; 0x21
     93c:	5a a1       	ldd	r21, Y+34	; 0x22
     93e:	28 1b       	sub	r18, r24
     940:	39 0b       	sbc	r19, r25
     942:	4a 0b       	sbc	r20, r26
     944:	5b 0b       	sbc	r21, r27
     946:	6c 89       	ldd	r22, Y+20	; 0x14
     948:	7d 89       	ldd	r23, Y+21	; 0x15
     94a:	88 8d       	ldd	r24, Y+24	; 0x18
     94c:	99 8d       	ldd	r25, Y+25	; 0x19
     94e:	86 0f       	add	r24, r22
     950:	97 1f       	adc	r25, r23
     952:	96 95       	lsr	r25
     954:	87 95       	ror	r24
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	cc 01       	movw	r24, r24
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	4a 07       	cpc	r20, r26
     966:	5b 07       	cpc	r21, r27
     968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
     96a:	ce c0       	rjmp	.+412    	; 0xb08 <__stack+0x209>
			{
				i_E++;
     96c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <i_E.2182>
				Tempo_Ant_E += ((Semaforo.tempo_verde_ms + Semaforo.tempo_amarelo_ms)/4);
     976:	2c 89       	ldd	r18, Y+20	; 0x14
     978:	3d 89       	ldd	r19, Y+21	; 0x15
     97a:	88 8d       	ldd	r24, Y+24	; 0x18
     97c:	99 8d       	ldd	r25, Y+25	; 0x19
     97e:	82 0f       	add	r24, r18
     980:	93 1f       	adc	r25, r19
     982:	96 95       	lsr	r25
     984:	87 95       	ror	r24
     986:	96 95       	lsr	r25
     988:	87 95       	ror	r24
     98a:	9c 01       	movw	r18, r24
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     994:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     998:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     99c:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     9a0:	82 0f       	add	r24, r18
     9a2:	93 1f       	adc	r25, r19
     9a4:	a4 1f       	adc	r26, r20
     9a6:	b5 1f       	adc	r27, r21
     9a8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Tempo_Ant_E.2185>
     9ac:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Tempo_Ant_E.2185+0x1>
     9b0:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <Tempo_Ant_E.2185+0x2>
     9b4:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <Tempo_Ant_E.2185+0x3>
				USART_Transmit('0'+ i_E);
     9b8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     9bc:	80 5d       	subi	r24, 0xD0	; 208
     9be:	0e 94 3f 08 	call	0x107e	; 0x107e <USART_Transmit>
				}
			}
	    }

     } 
}
     9c2:	a2 c0       	rjmp	.+324    	; 0xb08 <__stack+0x209>
			}
		}
		//Teste para os leds vermelhos
		else
		{
			if(i_E<=7)
     9c4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     9c8:	88 30       	cpi	r24, 0x08	; 8
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	53 c0       	rjmp	.+166    	; 0xa74 <__stack+0x175>
			{
				if((tempo_ms - Tempo_Ant_E) >=(Semaforo.tempo_vermelho_ms - Semaforo.tempo_amarelo_ms)/4)
     9ce:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     9d2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     9d6:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     9da:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     9de:	2f 8d       	ldd	r18, Y+31	; 0x1f
     9e0:	38 a1       	ldd	r19, Y+32	; 0x20
     9e2:	49 a1       	ldd	r20, Y+33	; 0x21
     9e4:	5a a1       	ldd	r21, Y+34	; 0x22
     9e6:	28 1b       	sub	r18, r24
     9e8:	39 0b       	sbc	r19, r25
     9ea:	4a 0b       	sbc	r20, r26
     9ec:	5b 0b       	sbc	r21, r27
     9ee:	6e 89       	ldd	r22, Y+22	; 0x16
     9f0:	7f 89       	ldd	r23, Y+23	; 0x17
     9f2:	88 8d       	ldd	r24, Y+24	; 0x18
     9f4:	99 8d       	ldd	r25, Y+25	; 0x19
     9f6:	7b 01       	movw	r14, r22
     9f8:	e8 1a       	sub	r14, r24
     9fa:	f9 0a       	sbc	r15, r25
     9fc:	c7 01       	movw	r24, r14
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	cc 01       	movw	r24, r24
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	4a 07       	cpc	r20, r26
     a12:	5b 07       	cpc	r21, r27
     a14:	08 f4       	brcc	.+2      	; 0xa18 <__stack+0x119>
     a16:	78 c0       	rjmp	.+240    	; 0xb08 <__stack+0x209>
				{
					i_E++;
     a18:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <i_E.2182>
					Tempo_Ant_E += (Semaforo.tempo_vermelho_ms - Semaforo.tempo_amarelo_ms)/4;
     a22:	2e 89       	ldd	r18, Y+22	; 0x16
     a24:	3f 89       	ldd	r19, Y+23	; 0x17
     a26:	88 8d       	ldd	r24, Y+24	; 0x18
     a28:	99 8d       	ldd	r25, Y+25	; 0x19
     a2a:	89 01       	movw	r16, r18
     a2c:	08 1b       	sub	r16, r24
     a2e:	19 0b       	sbc	r17, r25
     a30:	c8 01       	movw	r24, r16
     a32:	96 95       	lsr	r25
     a34:	87 95       	ror	r24
     a36:	96 95       	lsr	r25
     a38:	87 95       	ror	r24
     a3a:	9c 01       	movw	r18, r24
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     a44:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     a48:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     a4c:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	a4 1f       	adc	r26, r20
     a56:	b5 1f       	adc	r27, r21
     a58:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Tempo_Ant_E.2185>
     a5c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Tempo_Ant_E.2185+0x1>
     a60:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <Tempo_Ant_E.2185+0x2>
     a64:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <Tempo_Ant_E.2185+0x3>
					USART_Transmit('0' + i_E);
     a68:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     a6c:	80 5d       	subi	r24, 0xD0	; 208
     a6e:	0e 94 3f 08 	call	0x107e	; 0x107e <USART_Transmit>
				}
			}
	    }

     } 
}
     a72:	4a c0       	rjmp	.+148    	; 0xb08 <__stack+0x209>
					USART_Transmit('0' + i_E);
				}
			}
			else
			{
				if(i_E <= 8)
     a74:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     a78:	89 30       	cpi	r24, 0x09	; 9
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <__stack+0x17f>
     a7c:	3e c0       	rjmp	.+124    	; 0xafa <__stack+0x1fb>
				{
					if((tempo_ms - Tempo_Ant_E) >= (Semaforo.tempo_amarelo_ms))
     a7e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     a82:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     a86:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     a8a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     a8e:	2f 8d       	ldd	r18, Y+31	; 0x1f
     a90:	38 a1       	ldd	r19, Y+32	; 0x20
     a92:	49 a1       	ldd	r20, Y+33	; 0x21
     a94:	5a a1       	ldd	r21, Y+34	; 0x22
     a96:	28 1b       	sub	r18, r24
     a98:	39 0b       	sbc	r19, r25
     a9a:	4a 0b       	sbc	r20, r26
     a9c:	5b 0b       	sbc	r21, r27
     a9e:	88 8d       	ldd	r24, Y+24	; 0x18
     aa0:	99 8d       	ldd	r25, Y+25	; 0x19
     aa2:	cc 01       	movw	r24, r24
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	4a 07       	cpc	r20, r26
     aae:	5b 07       	cpc	r21, r27
     ab0:	58 f1       	brcs	.+86     	; 0xb08 <__stack+0x209>
					{
						i_E++;
     ab2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <i_E.2182>
						Tempo_Ant_E += Semaforo.tempo_amarelo_ms;
     abc:	88 8d       	ldd	r24, Y+24	; 0x18
     abe:	99 8d       	ldd	r25, Y+25	; 0x19
     ac0:	9c 01       	movw	r18, r24
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Tempo_Ant_E.2185>
     aca:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Tempo_Ant_E.2185+0x1>
     ace:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Tempo_Ant_E.2185+0x2>
     ad2:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Tempo_Ant_E.2185+0x3>
     ad6:	82 0f       	add	r24, r18
     ad8:	93 1f       	adc	r25, r19
     ada:	a4 1f       	adc	r26, r20
     adc:	b5 1f       	adc	r27, r21
     ade:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Tempo_Ant_E.2185>
     ae2:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Tempo_Ant_E.2185+0x1>
     ae6:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <Tempo_Ant_E.2185+0x2>
     aea:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <Tempo_Ant_E.2185+0x3>
						USART_Transmit('0' + i_E);
     aee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     af2:	80 5d       	subi	r24, 0xD0	; 208
     af4:	0e 94 3f 08 	call	0x107e	; 0x107e <USART_Transmit>
				}
			}
	    }

     } 
}
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <__stack+0x209>
						USART_Transmit('0' + i_E);
					}
				}
				else
				{
					i_E = 0;
     afa:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <i_E.2182>
					USART_Transmit('0' + i_E);
     afe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i_E.2182>
     b02:	80 5d       	subi	r24, 0xD0	; 208
     b04:	0e 94 3f 08 	call	0x107e	; 0x107e <USART_Transmit>
				}
			}
	    }

     } 
}
     b08:	00 00       	nop
     b0a:	a4 96       	adiw	r28, 0x24	; 36
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <anima_LCD>:

//Função que mostra na tela as informações de tempo
void anima_LCD(stc_semaforo Semaforo)
{
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	a1 97       	sbiw	r28, 0x21	; 33
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	ee 8a       	std	Y+22, r14	; 0x16
     b4e:	ff 8a       	std	Y+23, r15	; 0x17
     b50:	08 8f       	std	Y+24, r16	; 0x18
     b52:	19 8f       	std	Y+25, r17	; 0x19
     b54:	2a 8f       	std	Y+26, r18	; 0x1a
     b56:	3b 8f       	std	Y+27, r19	; 0x1b
     b58:	4c 8f       	std	Y+28, r20	; 0x1c
     b5a:	5d 8f       	std	Y+29, r21	; 0x1d
     b5c:	6e 8f       	std	Y+30, r22	; 0x1e
     b5e:	7f 8f       	std	Y+31, r23	; 0x1f
     b60:	88 a3       	std	Y+32, r24	; 0x20
     b62:	99 a3       	std	Y+33, r25	; 0x21
	unsigned char tempo_amarelo_s_strig[2];
	unsigned char modo_s_string [2];
	unsigned char carros_min_string [5];
	unsigned char lux_string [8];
	
	sprintf(tempo_verde_s_strig,"%u", Semaforo.tempo_verde_ms/1000);
     b64:	8f 89       	ldd	r24, Y+23	; 0x17
     b66:	98 8d       	ldd	r25, Y+24	; 0x18
     b68:	96 95       	lsr	r25
     b6a:	87 95       	ror	r24
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	96 95       	lsr	r25
     b72:	87 95       	ror	r24
     b74:	9c 01       	movw	r18, r24
     b76:	a5 ec       	ldi	r26, 0xC5	; 197
     b78:	b0 e2       	ldi	r27, 0x20	; 32
     b7a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__umulhisi3>
     b7e:	92 95       	swap	r25
     b80:	82 95       	swap	r24
     b82:	8f 70       	andi	r24, 0x0F	; 15
     b84:	89 27       	eor	r24, r25
     b86:	9f 70       	andi	r25, 0x0F	; 15
     b88:	89 27       	eor	r24, r25
     b8a:	29 2f       	mov	r18, r25
     b8c:	2f 93       	push	r18
     b8e:	8f 93       	push	r24
     b90:	8e e1       	ldi	r24, 0x1E	; 30
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	89 2f       	mov	r24, r25
     b96:	8f 93       	push	r24
     b98:	8e e1       	ldi	r24, 0x1E	; 30
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	8f 93       	push	r24
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sprintf>
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
	sprintf(tempo_vermelho_s_strig,"%u", Semaforo.tempo_vermelho_ms/1000);
     bb6:	89 8d       	ldd	r24, Y+25	; 0x19
     bb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bba:	96 95       	lsr	r25
     bbc:	87 95       	ror	r24
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	9c 01       	movw	r18, r24
     bc8:	a5 ec       	ldi	r26, 0xC5	; 197
     bca:	b0 e2       	ldi	r27, 0x20	; 32
     bcc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__umulhisi3>
     bd0:	92 95       	swap	r25
     bd2:	82 95       	swap	r24
     bd4:	8f 70       	andi	r24, 0x0F	; 15
     bd6:	89 27       	eor	r24, r25
     bd8:	9f 70       	andi	r25, 0x0F	; 15
     bda:	89 27       	eor	r24, r25
     bdc:	29 2f       	mov	r18, r25
     bde:	2f 93       	push	r18
     be0:	8f 93       	push	r24
     be2:	8e e1       	ldi	r24, 0x1E	; 30
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	89 2f       	mov	r24, r25
     be8:	8f 93       	push	r24
     bea:	8e e1       	ldi	r24, 0x1E	; 30
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	8f 93       	push	r24
     bf0:	ce 01       	movw	r24, r28
     bf2:	03 96       	adiw	r24, 0x03	; 3
     bf4:	29 2f       	mov	r18, r25
     bf6:	2f 93       	push	r18
     bf8:	8f 93       	push	r24
     bfa:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sprintf>
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
	sprintf(tempo_amarelo_s_strig,"%u", Semaforo.tempo_amarelo_ms/1000);
     c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	96 95       	lsr	r25
     c14:	87 95       	ror	r24
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	9c 01       	movw	r18, r24
     c1c:	a5 ec       	ldi	r26, 0xC5	; 197
     c1e:	b0 e2       	ldi	r27, 0x20	; 32
     c20:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__umulhisi3>
     c24:	92 95       	swap	r25
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	89 27       	eor	r24, r25
     c2c:	9f 70       	andi	r25, 0x0F	; 15
     c2e:	89 27       	eor	r24, r25
     c30:	29 2f       	mov	r18, r25
     c32:	2f 93       	push	r18
     c34:	8f 93       	push	r24
     c36:	8e e1       	ldi	r24, 0x1E	; 30
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	89 2f       	mov	r24, r25
     c3c:	8f 93       	push	r24
     c3e:	8e e1       	ldi	r24, 0x1E	; 30
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	8f 93       	push	r24
     c44:	ce 01       	movw	r24, r28
     c46:	05 96       	adiw	r24, 0x05	; 5
     c48:	29 2f       	mov	r18, r25
     c4a:	2f 93       	push	r18
     c4c:	8f 93       	push	r24
     c4e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sprintf>
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
	sprintf(carros_min_string,"%u",Semaforo.carros_min);
     c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c62:	29 2f       	mov	r18, r25
     c64:	2f 93       	push	r18
     c66:	8f 93       	push	r24
     c68:	8e e1       	ldi	r24, 0x1E	; 30
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	89 2f       	mov	r24, r25
     c6e:	8f 93       	push	r24
     c70:	8e e1       	ldi	r24, 0x1E	; 30
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	8f 93       	push	r24
     c76:	ce 01       	movw	r24, r28
     c78:	09 96       	adiw	r24, 0x09	; 9
     c7a:	29 2f       	mov	r18, r25
     c7c:	2f 93       	push	r18
     c7e:	8f 93       	push	r24
     c80:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sprintf>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
	sprintf(lux_string,"%u",Semaforo.LUX);
     c90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c92:	98 a1       	ldd	r25, Y+32	; 0x20
     c94:	29 2f       	mov	r18, r25
     c96:	2f 93       	push	r18
     c98:	8f 93       	push	r24
     c9a:	8e e1       	ldi	r24, 0x1E	; 30
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	89 2f       	mov	r24, r25
     ca0:	8f 93       	push	r24
     ca2:	8e e1       	ldi	r24, 0x1E	; 30
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	8f 93       	push	r24
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 96       	adiw	r24, 0x0e	; 14
     cac:	29 2f       	mov	r18, r25
     cae:	2f 93       	push	r18
     cb0:	8f 93       	push	r24
     cb2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sprintf>
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
	//Operações utilizando a biblioteca do display para mostrar na tela
	nokia_lcd_clear();
     cc2:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <nokia_lcd_clear>
	nokia_lcd_set_cursor(0,5);
     cc6:	65 e0       	ldi	r22, 0x05	; 5
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Modo",1);
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	81 e2       	ldi	r24, 0x21	; 33
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(35,5);
     cd8:	65 e0       	ldi	r22, 0x05	; 5
     cda:	83 e2       	ldi	r24, 0x23	; 35
     cdc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	if(semaforo.modo_am == 0)
     ce0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ce4:	88 23       	and	r24, r24
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <anima_LCD+0x1c4>
	nokia_lcd_write_string("A",1);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	86 e2       	ldi	r24, 0x26	; 38
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <anima_LCD+0x1ce>
	else
	nokia_lcd_write_string("M",1);
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	88 e2       	ldi	r24, 0x28	; 40
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0,15);
     cfe:	6f e0       	ldi	r22, 0x0F	; 15
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Vd",1);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	8a e2       	ldi	r24, 0x2A	; 42
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(35,15);
     d10:	6f e0       	ldi	r22, 0x0F	; 15
     d12:	83 e2       	ldi	r24, 0x23	; 35
     d14:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_verde_s_strig,1);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0,25);
     d22:	69 e1       	ldi	r22, 0x19	; 25
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Vm",1);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	80 e3       	ldi	r24, 0x30	; 48
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(35,25);
     d34:	69 e1       	ldi	r22, 0x19	; 25
     d36:	83 e2       	ldi	r24, 0x23	; 35
     d38:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_vermelho_s_strig,1);
     d3c:	ce 01       	movw	r24, r28
     d3e:	03 96       	adiw	r24, 0x03	; 3
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0,35);
     d46:	63 e2       	ldi	r22, 0x23	; 35
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Am",1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	86 e3       	ldi	r24, 0x36	; 54
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(35,35);
     d58:	63 e2       	ldi	r22, 0x23	; 35
     d5a:	83 e2       	ldi	r24, 0x23	; 35
     d5c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo_amarelo_s_strig,1);
     d60:	ce 01       	movw	r24, r28
     d62:	05 96       	adiw	r24, 0x05	; 5
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45, 5+selecao_parametro*10);
     d6a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     d6e:	88 0f       	add	r24, r24
     d70:	98 2f       	mov	r25, r24
     d72:	99 0f       	add	r25, r25
     d74:	99 0f       	add	r25, r25
     d76:	89 0f       	add	r24, r25
     d78:	8b 5f       	subi	r24, 0xFB	; 251
     d7a:	68 2f       	mov	r22, r24
     d7c:	8d e2       	ldi	r24, 0x2D	; 45
     d7e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("<",1);
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	8c e3       	ldi	r24, 0x3C	; 60
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,25);
     d8c:	69 e1       	ldi	r22, 0x19	; 25
     d8e:	84 e3       	ldi	r24, 0x34	; 52
     d90:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(carros_min_string, 2);
     d94:	ce 01       	movw	r24, r28
     d96:	09 96       	adiw	r24, 0x09	; 9
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(55,40);
     d9e:	68 e2       	ldi	r22, 0x28	; 40
     da0:	87 e3       	ldi	r24, 0x37	; 55
     da2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("c/min",1);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	8e e3       	ldi	r24, 0x3E	; 62
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(52,0);
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	84 e3       	ldi	r24, 0x34	; 52
     db4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(lux_string, 2);
     db8:	ce 01       	movw	r24, r28
     dba:	0e 96       	adiw	r24, 0x0e	; 14
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(55,15);
     dc2:	6f e0       	ldi	r22, 0x0F	; 15
     dc4:	87 e3       	ldi	r24, 0x37	; 55
     dc6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("lux",1);
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	84 e4       	ldi	r24, 0x44	; 68
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <nokia_lcd_write_string>
	nokia_lcd_render();
     dd4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nokia_lcd_render>
	
}
     dd8:	00 00       	nop
     dda:	a1 96       	adiw	r28, 0x21	; 33
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	08 95       	ret

00000df4 <conta_carro>:
//Função que conta o número de carros
void conta_carro(uint8_t *flag_disparo)
{
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <conta_carro+0x6>
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01

	if(*flag_disparo) //Teste de 5 segundos
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <conta_carro+0x1c>
     e0e:	b8 c0       	rjmp	.+368    	; 0xf80 <conta_carro+0x18c>
	{
		*flag_disparo = 0;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	fc 01       	movw	r30, r24
     e16:	10 82       	st	Z, r1
		semaforo.carros_min = carros * 12; //Contagem de carros por minuto
     e18:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <carros>
     e1c:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <carros+0x1>
     e20:	c9 01       	movw	r24, r18
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
     e36:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
		carros = 0;
     e3a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <carros+0x1>
     e3e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <carros>
		if(semaforo.modo_am == 0)
     e42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e46:	88 23       	and	r24, r24
     e48:	09 f0       	breq	.+2      	; 0xe4c <conta_carro+0x58>
     e4a:	9a c0       	rjmp	.+308    	; 0xf80 <conta_carro+0x18c>
		{
			semaforo.tempo_verde_ms = 1000 + ((uint16_t)(semaforo.carros_min*16.7)/1000)*1000; //Equação que determina o tempo do led verde aceso no modo automático
     e4c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     e50:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
     e54:	cc 01       	movw	r24, r24
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatunsisf>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	2a e9       	ldi	r18, 0x9A	; 154
     e68:	39 e9       	ldi	r19, 0x99	; 153
     e6a:	45 e8       	ldi	r20, 0x85	; 133
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	9c 01       	movw	r18, r24
     e94:	a5 ec       	ldi	r26, 0xC5	; 197
     e96:	b0 e2       	ldi	r27, 0x20	; 32
     e98:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__umulhisi3>
     e9c:	92 95       	swap	r25
     e9e:	82 95       	swap	r24
     ea0:	8f 70       	andi	r24, 0x0F	; 15
     ea2:	89 27       	eor	r24, r25
     ea4:	9f 70       	andi	r25, 0x0F	; 15
     ea6:	89 27       	eor	r24, r25
     ea8:	ac 01       	movw	r20, r24
     eaa:	4f 5f       	subi	r20, 0xFF	; 255
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	28 ee       	ldi	r18, 0xE8	; 232
     eb0:	33 e0       	ldi	r19, 0x03	; 3
     eb2:	42 9f       	mul	r20, r18
     eb4:	c0 01       	movw	r24, r0
     eb6:	43 9f       	mul	r20, r19
     eb8:	90 0d       	add	r25, r0
     eba:	52 9f       	mul	r21, r18
     ebc:	90 0d       	add	r25, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     ec4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			if(semaforo.tempo_verde_ms > 9000) //Limite de tempo para o led verde
     ec8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ecc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     ed0:	89 32       	cpi	r24, 0x29	; 41
     ed2:	93 42       	sbci	r25, 0x23	; 35
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <conta_carro+0xee>
			    semaforo.tempo_verde_ms = 9000;
     ed6:	88 e2       	ldi	r24, 0x28	; 40
     ed8:	93 e2       	ldi	r25, 0x23	; 35
     eda:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     ede:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			semaforo.tempo_vermelho_ms = 9000 -	((uint16_t)(semaforo.carros_min*16.7)/1000)*1000;//Equação que determina o tempo do led vermelho aceso no modo automático
     ee2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     ee6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
     eea:	cc 01       	movw	r24, r24
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatunsisf>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	2a e9       	ldi	r18, 0x9A	; 154
     efe:	39 e9       	ldi	r19, 0x99	; 153
     f00:	45 e8       	ldi	r20, 0x85	; 133
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	9c 01       	movw	r18, r24
     f2a:	a5 ec       	ldi	r26, 0xC5	; 197
     f2c:	b0 e2       	ldi	r27, 0x20	; 32
     f2e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__umulhisi3>
     f32:	ac 01       	movw	r20, r24
     f34:	52 95       	swap	r21
     f36:	42 95       	swap	r20
     f38:	4f 70       	andi	r20, 0x0F	; 15
     f3a:	45 27       	eor	r20, r21
     f3c:	5f 70       	andi	r21, 0x0F	; 15
     f3e:	45 27       	eor	r20, r21
     f40:	28 ee       	ldi	r18, 0xE8	; 232
     f42:	33 e0       	ldi	r19, 0x03	; 3
     f44:	42 9f       	mul	r20, r18
     f46:	c0 01       	movw	r24, r0
     f48:	43 9f       	mul	r20, r19
     f4a:	90 0d       	add	r25, r0
     f4c:	52 9f       	mul	r21, r18
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	28 e2       	ldi	r18, 0x28	; 40
     f54:	33 e2       	ldi	r19, 0x23	; 35
     f56:	a9 01       	movw	r20, r18
     f58:	48 1b       	sub	r20, r24
     f5a:	59 0b       	sbc	r21, r25
     f5c:	ca 01       	movw	r24, r20
     f5e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     f62:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			if(semaforo.tempo_vermelho_ms > 32000) //Limite de tempo para o led vermelho
     f66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     f6a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	9d 47       	sbci	r25, 0x7D	; 125
     f72:	30 f0       	brcs	.+12     	; 0xf80 <conta_carro+0x18c>
			    semaforo.tempo_vermelho_ms = 1000;
     f74:	88 ee       	ldi	r24, 0xE8	; 232
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     f7c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			
		}
	}
}
     f80:	00 00       	nop
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <leitura_ADC>:
//Função que contabiliza o LUX e determina o acendimento da Luminária
void leitura_ADC (uint8_t *flag_disparo)
{
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	00 d0       	rcall	.+0      	; 0xf9a <leitura_ADC+0xe>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	
	if(*flag_disparo)  //Teste de 500 milisegundos
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	fc 01       	movw	r30, r24
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <leitura_ADC+0x24>
     fae:	43 c0       	rjmp	.+134    	; 0x1036 <leitura_ADC+0xaa>
	{
		*flag_disparo = 0;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	fc 01       	movw	r30, r24
     fb6:	10 82       	st	Z, r1
		semaforo.LUX = 1023000/ADC - 1000; //Equação que determina o valor de lux em função da tensão de entrada
     fb8:	88 e7       	ldi	r24, 0x78	; 120
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	9c 01       	movw	r18, r24
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	88 e1       	ldi	r24, 0x18	; 24
     fca:	9c e9       	ldi	r25, 0x9C	; 156
     fcc:	af e0       	ldi	r26, 0x0F	; 15
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodsi4>
     fd8:	da 01       	movw	r26, r20
     fda:	c9 01       	movw	r24, r18
     fdc:	88 5e       	subi	r24, 0xE8	; 232
     fde:	93 40       	sbci	r25, 0x03	; 3
     fe0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     fe4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
		if(semaforo.LUX >= 300)
     fe8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
     fec:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     ff0:	8c 32       	cpi	r24, 0x2C	; 44
     ff2:	91 40       	sbci	r25, 0x01	; 1
     ff4:	28 f0       	brcs	.+10     	; 0x1000 <leitura_ADC+0x74>
		    OCR2B = 0;  //Se LUX estiver igual ou acima de 300, a luminária apaga
     ff6:	84 eb       	ldi	r24, 0xB4	; 180
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	10 82       	st	Z, r1
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <leitura_ADC+0xaa>
		else
		{
			if(((PINC & 0b01000000) == 0) || (semaforo.carros_min > 0) )
    1000:	86 e2       	ldi	r24, 0x26	; 38
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 74       	andi	r24, 0x40	; 64
    100e:	99 27       	eor	r25, r25
    1010:	89 2b       	or	r24, r25
    1012:	31 f0       	breq	.+12     	; 0x1020 <leitura_ADC+0x94>
    1014:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1018:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    101c:	89 2b       	or	r24, r25
    101e:	31 f0       	breq	.+12     	; 0x102c <leitura_ADC+0xa0>
			    OCR2B = 255; //Se LUX < 300 e tenha pessoas ou carros passando, luminária ligada 100%
    1020:	84 eb       	ldi	r24, 0xB4	; 180
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <leitura_ADC+0xaa>
			else
			    OCR2B = 76;//Se LUX < 300 sem que tenha pessoas ou carros passando, luminária ligada 30%
    102c:	84 eb       	ldi	r24, 0xB4	; 180
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	2c e4       	ldi	r18, 0x4C	; 76
    1032:	fc 01       	movw	r30, r24
    1034:	20 83       	st	Z, r18
		}
	}
	anima_LCD(semaforo);
    1036:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    103a:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    103e:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1042:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1046:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    104a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    104e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    1052:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1056:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    105a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    105e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
    1062:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
    1066:	0e 94 98 05 	call	0xb30	; 0xb30 <anima_LCD>
}
    106a:	00 00       	nop
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	08 95       	ret

0000107e <USART_Transmit>:
//Função de transmissão para semáforo escravo
//Função para envio de um frame de 5 a 8 bits
void USART_Transmit(unsigned char data)
{
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	1f 92       	push	r1
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0))); //Espera limpeza do registrador de transmissão
    108a:	00 00       	nop
    108c:	80 ec       	ldi	r24, 0xC0	; 192
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	80 81       	ld	r24, Z
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	80 72       	andi	r24, 0x20	; 32
    109a:	99 27       	eor	r25, r25
    109c:	89 2b       	or	r24, r25
    109e:	b1 f3       	breq	.-20     	; 0x108c <USART_Transmit+0xe>
	UDR0 = data;
    10a0:	86 ec       	ldi	r24, 0xC6	; 198
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
}
    10aa:	00 00       	nop
    10ac:	0f 90       	pop	r0
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <passagem_trem>:
//Função que controla cancela do trem
void passagem_trem(uint8_t *flag_fecha,uint8_t *flag_abre)
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <passagem_trem+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <passagem_trem+0x8>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	7c 83       	std	Y+4, r23	; 0x04
    10c6:	6b 83       	std	Y+3, r22	; 0x03
	//Quando flag para fechar a cancela é 1, a cancela fecha e para o semáforo
	if(*flag_fecha)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	fc 01       	movw	r30, r24
    10ce:	80 81       	ld	r24, Z
    10d0:	88 23       	and	r24, r24
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <passagem_trem+0x3c>
	{
		flag_trem = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <flag_trem>
		OCR1A = 3000; //Duty Cycle de 10% para o servo estar em 90°
    10da:	88 e8       	ldi	r24, 0x88	; 136
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	28 eb       	ldi	r18, 0xB8	; 184
    10e0:	3b e0       	ldi	r19, 0x0B	; 11
    10e2:	fc 01       	movw	r30, r24
    10e4:	31 83       	std	Z+1, r19	; 0x01
    10e6:	20 83       	st	Z, r18
		*flag_fecha = 0;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	fc 01       	movw	r30, r24
    10ee:	10 82       	st	Z, r1
	}
	//Quando a flag para abrir é 1, a cancela abre e o semáforo começa do vermelho 
	if(*flag_abre)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	fc 01       	movw	r30, r24
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	69 f0       	breq	.+26     	; 0x1116 <passagem_trem+0x62>
	{
		flag_trem = 0;
    10fc:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <flag_trem>
		OCR1A = 2000; //Duty Cycle de ¨% para o servo estar em 0°
    1100:	88 e8       	ldi	r24, 0x88	; 136
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	20 ed       	ldi	r18, 0xD0	; 208
    1106:	37 e0       	ldi	r19, 0x07	; 7
    1108:	fc 01       	movw	r30, r24
    110a:	31 83       	std	Z+1, r19	; 0x01
    110c:	20 83       	st	Z, r18
		*flag_abre = 0;
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	fc 01       	movw	r30, r24
    1114:	10 82       	st	Z, r1
	}
}
    1116:	00 00       	nop
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <main>:

int main(void){
    1126:	8f 92       	push	r8
    1128:	9f 92       	push	r9
    112a:	af 92       	push	r10
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	//Configurando entradas e saídas
	DDRB = 0b00111111;  //Pinos B0-B5 como saída
    1142:	84 e2       	ldi	r24, 0x24	; 36
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	2f e3       	ldi	r18, 0x3F	; 63
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
	DDRD |= 0b00001000; //Pino D3 como entrada
    114c:	8a e2       	ldi	r24, 0x2A	; 42
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	2a e2       	ldi	r18, 0x2A	; 42
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	f9 01       	movw	r30, r18
    1156:	20 81       	ld	r18, Z
    1158:	28 60       	ori	r18, 0x08	; 8
    115a:	fc 01       	movw	r30, r24
    115c:	20 83       	st	Z, r18
	DDRC |= 0b00000010; //Pino C1 como entrada
    115e:	87 e2       	ldi	r24, 0x27	; 39
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	27 e2       	ldi	r18, 0x27	; 39
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	22 60       	ori	r18, 0x02	; 2
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
	PORTC &= 0b10111110; //Desabilitando o pull-up de C0
    1170:	88 e2       	ldi	r24, 0x28	; 40
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	28 e2       	ldi	r18, 0x28	; 40
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	f9 01       	movw	r30, r18
    117a:	20 81       	ld	r18, Z
    117c:	2e 7b       	andi	r18, 0xBE	; 190
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
	PORTC |= 0b01000000; //Habilitando o pull-up de C6
    1182:	88 e2       	ldi	r24, 0x28	; 40
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	28 e2       	ldi	r18, 0x28	; 40
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	20 64       	ori	r18, 0x40	; 64
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
	PORTD |= 0b11110000; //Definindo os pinos de pull-up D4-D7
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2b e2       	ldi	r18, 0x2B	; 43
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	20 6f       	ori	r18, 0xF0	; 240
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
	
	
	//Cofigurando as interrupções
	EICRA  |= 0b00001010;//Interrupção por borda de subida de INT0
    11a6:	89 e6       	ldi	r24, 0x69	; 105
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	29 e6       	ldi	r18, 0x69	; 105
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	f9 01       	movw	r30, r18
    11b0:	20 81       	ld	r18, Z
    11b2:	2a 60       	ori	r18, 0x0A	; 10
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
	EIMSK  |= 0b00000001;//Habilita interrupção do INT0
    11b8:	8d e3       	ldi	r24, 0x3D	; 61
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2d e3       	ldi	r18, 0x3D	; 61
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	20 81       	ld	r18, Z
    11c4:	21 60       	ori	r18, 0x01	; 1
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
	PCICR  = 0b00000100;//Habilita interrupção pelos pinos D
    11ca:	88 e6       	ldi	r24, 0x68	; 104
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	24 e0       	ldi	r18, 0x04	; 4
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	PCMSK2 = 0b01110000;//Habilita as interrupções dos pinos PD4, PD5 e PD6
    11d4:	8d e6       	ldi	r24, 0x6D	; 109
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	20 e7       	ldi	r18, 0x70	; 112
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
	
	//Configurando timer 1ms
	TCCR0A = 0b00000010; //habilitando o modo CTC do TC0
    11de:	84 e4       	ldi	r24, 0x44	; 68
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	22 e0       	ldi	r18, 0x02	; 2
    11e4:	fc 01       	movw	r30, r24
    11e6:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; //ligando com prescaler = 64
    11e8:	85 e4       	ldi	r24, 0x45	; 69
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	23 e0       	ldi	r18, 0x03	; 3
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
	OCR0A = 249; //Ajustando a contagem até 250
    11f2:	87 e4       	ldi	r24, 0x47	; 71
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	29 ef       	ldi	r18, 0xF9	; 249
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010; //Habilitando a interrupção na igualdade de comparação com OCR0A
    11fc:	8e e6       	ldi	r24, 0x6E	; 110
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
	
	//Configurando o ADC
	ADMUX = 0b01000000; //Vcc como referência, canal 0
    1206:	8c e7       	ldi	r24, 0x7C	; 124
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	20 e4       	ldi	r18, 0x40	; 64
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
	ADCSRA = 0b11100111; //Habilita o AD, modo conversão contínua, prescaler = 128
    1210:	8a e7       	ldi	r24, 0x7A	; 122
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	27 ee       	ldi	r18, 0xE7	; 231
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
	ADCSRB = 0b00000000; //Modo de conversão contínua
    121a:	8b e7       	ldi	r24, 0x7B	; 123
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	fc 01       	movw	r30, r24
    1220:	10 82       	st	Z, r1
	DIDR0 = 0b00111000; //Habilita o PC0 como entrada do ADC
    1222:	8e e7       	ldi	r24, 0x7E	; 126
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	28 e3       	ldi	r18, 0x38	; 56
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
	
	//Configurando o PWM da luminária
	TCCR2A = 0b00100011; //PWM rápido, ativa PWM no OC2B não invertido
    122c:	80 eb       	ldi	r24, 0xB0	; 176
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	23 e2       	ldi	r18, 0x23	; 35
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
	TCCR2B = 0b00000110; //Prescale 256, fpm = 16MHZ/(256*256)= 244Hz
    1236:	81 eb       	ldi	r24, 0xB1	; 177
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	26 e0       	ldi	r18, 0x06	; 6
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
	OCR2B = 77; //Duty inical de 30%, 256 * 30% = 76.8
    1240:	84 eb       	ldi	r24, 0xB4	; 180
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	2d e4       	ldi	r18, 0x4D	; 77
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
	
	//Configurando PWM do trem
    ICR1 = 39999; // Configura período do PWM
    124a:	86 e8       	ldi	r24, 0x86	; 134
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	2f e3       	ldi	r18, 0x3F	; 63
    1250:	3c e9       	ldi	r19, 0x9C	; 156
    1252:	fc 01       	movw	r30, r24
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18
	TCCR1A = 0b10100010; //PWM rápido, ativa PWM no OC1A não invertido
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	22 ea       	ldi	r18, 0xA2	; 162
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
	TCCR1B = 0b00011010; // Prescale 8, fpm = 50 hz => TOP = 39999
    1262:	81 e8       	ldi	r24, 0x81	; 129
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2a e1       	ldi	r18, 0x1A	; 26
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
	OCR1A = 2000; //Duty Cycle de 5%
    126c:	88 e8       	ldi	r24, 0x88	; 136
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	20 ed       	ldi	r18, 0xD0	; 208
    1272:	37 e0       	ldi	r19, 0x07	; 7
    1274:	fc 01       	movw	r30, r24
    1276:	31 83       	std	Z+1, r19	; 0x01
    1278:	20 83       	st	Z, r18

	//Configurando o USART
	UBRR0H = (unsigned char)(MYUBRR>>8); //Ajuste da taxa de transmissão
    127a:	85 ec       	ldi	r24, 0xC5	; 197
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	fc 01       	movw	r30, r24
    1280:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)MYUBRR;  //Ajuste da taxa de transmissão
    1282:	84 ec       	ldi	r24, 0xC4	; 196
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2f ef       	ldi	r18, 0xFF	; 255
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Habilita interrupção do receptor, o transmissor e o receptor
    128c:	81 ec       	ldi	r24, 0xC1	; 193
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	28 e9       	ldi	r18, 0x98	; 152
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18
	UCSR0C = (3<<UCSZ00);  //Ajusta o formato do frame: 8 bits de dados e 1 de parada, sem paridade
    1296:	82 ec       	ldi	r24, 0xC2	; 194
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	26 e0       	ldi	r18, 0x06	; 6
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
	
	//Iniciando o LCD
	nokia_lcd_init();
    12a0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <nokia_lcd_init>
	if(semaforo.modo_am == 0) //Valor inicial de semáforo automático sem carros passando
    12a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    12a8:	88 23       	and	r24, r24
    12aa:	91 f4       	brne	.+36     	; 0x12d0 <main+0x1aa>
	{
		semaforo.tempo_verde_ms =   1000;
    12ac:	88 ee       	ldi	r24, 0xE8	; 232
    12ae:	93 e0       	ldi	r25, 0x03	; 3
    12b0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    12b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		semaforo.tempo_vermelho_ms = 9000;
    12b8:	88 e2       	ldi	r24, 0x28	; 40
    12ba:	93 e2       	ldi	r25, 0x23	; 35
    12bc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    12c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		semaforo.tempo_amarelo_ms = 1000;
    12c4:	88 ee       	ldi	r24, 0xE8	; 232
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    12cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
	}
	
	anima_LCD(semaforo);
    12d0:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    12d4:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    12d8:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    12dc:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    12e0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    12e4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    12e8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    12ec:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    12f0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    12f4:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    12f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
    12fc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
    1300:	0e 94 98 05 	call	0xb30	; 0xb30 <anima_LCD>

	sei(); //Habilitando as interrupções
    1304:	78 94       	sei
	while (1)
	{

		leitura_ADC(&flag_500ms);
    1306:	8e e4       	ldi	r24, 0x4E	; 78
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <leitura_ADC>
		conta_carro(&flag_5000ms);
    130e:	8d e4       	ldi	r24, 0x4D	; 77
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <conta_carro>
		//Chamando a função que realiza a operação do semáforo
		anima_semaforo(semaforo,tempo_ms,&flag_trem);
    1316:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tempo_ms>
    131a:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tempo_ms+0x1>
    131e:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <tempo_ms+0x2>
    1322:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <tempo_ms+0x3>
    1326:	0f 2e       	mov	r0, r31
    1328:	ff e4       	ldi	r31, 0x4F	; 79
    132a:	8f 2e       	mov	r8, r31
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	9f 2e       	mov	r9, r31
    1330:	f0 2d       	mov	r31, r0
    1332:	5c 01       	movw	r10, r24
    1334:	6d 01       	movw	r12, r26
    1336:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    133a:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    133e:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1342:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1346:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    134a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    134e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    1352:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    1356:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    135a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    135e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
    1362:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
    1366:	0e 94 1e 03 	call	0x63c	; 0x63c <anima_semaforo>
		passagem_trem(&flag_fecha, &flag_abre);
    136a:	61 e5       	ldi	r22, 0x51	; 81
    136c:	71 e0       	ldi	r23, 0x01	; 1
    136e:	80 e5       	ldi	r24, 0x50	; 80
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <passagem_trem>
	}
    1376:	c7 cf       	rjmp	.-114    	; 0x1306 <main+0x1e0>

00001378 <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	00 d0       	rcall	.+0      	; 0x1380 <write+0x8>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
    1388:	88 e2       	ldi	r24, 0x28	; 40
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	28 e2       	ldi	r18, 0x28	; 40
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	f9 01       	movw	r30, r18
    1392:	20 81       	ld	r18, Z
    1394:	2d 7f       	andi	r18, 0xFD	; 253
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	88 23       	and	r24, r24
    139e:	51 f0       	breq	.+20     	; 0x13b4 <write+0x3c>
    13a0:	88 e2       	ldi	r24, 0x28	; 40
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	28 e2       	ldi	r18, 0x28	; 40
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	f9 01       	movw	r30, r18
    13aa:	20 81       	ld	r18, Z
    13ac:	28 60       	ori	r18, 0x08	; 8
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <write+0x4e>
    13b4:	88 e2       	ldi	r24, 0x28	; 40
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	28 e2       	ldi	r18, 0x28	; 40
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	27 7f       	andi	r18, 0xF7	; 247
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	3c c0       	rjmp	.+120    	; 0x1442 <write+0xca>
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	21 2f       	mov	r18, r17
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	47 e0       	ldi	r20, 0x07	; 7
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	ba 01       	movw	r22, r20
    13da:	62 1b       	sub	r22, r18
    13dc:	73 0b       	sbc	r23, r19
    13de:	9b 01       	movw	r18, r22
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <write+0x6e>
    13e2:	95 95       	asr	r25
    13e4:	87 95       	ror	r24
    13e6:	2a 95       	dec	r18
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <write+0x6a>
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	99 27       	eor	r25, r25
    13ee:	89 2b       	or	r24, r25
    13f0:	51 f0       	breq	.+20     	; 0x1406 <write+0x8e>
    13f2:	88 e2       	ldi	r24, 0x28	; 40
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	28 e2       	ldi	r18, 0x28	; 40
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	f9 01       	movw	r30, r18
    13fc:	20 81       	ld	r18, Z
    13fe:	20 61       	ori	r18, 0x10	; 16
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <write+0xa0>
    1406:	88 e2       	ldi	r24, 0x28	; 40
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	28 e2       	ldi	r18, 0x28	; 40
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	f9 01       	movw	r30, r18
    1410:	20 81       	ld	r18, Z
    1412:	2f 7e       	andi	r18, 0xEF	; 239
    1414:	fc 01       	movw	r30, r24
    1416:	20 83       	st	Z, r18
    1418:	88 e2       	ldi	r24, 0x28	; 40
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	28 e2       	ldi	r18, 0x28	; 40
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	20 62       	ori	r18, 0x20	; 32
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
    142a:	88 e2       	ldi	r24, 0x28	; 40
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	28 e2       	ldi	r18, 0x28	; 40
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	2f 7d       	andi	r18, 0xDF	; 223
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
    143c:	81 2f       	mov	r24, r17
    143e:	11 e0       	ldi	r17, 0x01	; 1
    1440:	18 0f       	add	r17, r24
    1442:	18 30       	cpi	r17, 0x08	; 8
    1444:	10 f2       	brcs	.-124    	; 0x13ca <write+0x52>
    1446:	88 e2       	ldi	r24, 0x28	; 40
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	28 e2       	ldi	r18, 0x28	; 40
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	20 81       	ld	r18, Z
    1452:	22 60       	ori	r18, 0x02	; 2
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
    1458:	00 00       	nop
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	08 95       	ret

00001466 <write_cmd>:
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	1f 92       	push	r1
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	0e 94 bc 09 	call	0x1378	; 0x1378 <write>
    147a:	00 00       	nop
    147c:	0f 90       	pop	r0
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <write_data>:
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	1f 92       	push	r1
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	0e 94 bc 09 	call	0x1378	; 0x1378 <write>
    1498:	00 00       	nop
    149a:	0f 90       	pop	r0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <nokia_lcd_init>:
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	6c 97       	sbiw	r28, 0x1c	; 28
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	87 e2       	ldi	r24, 0x27	; 39
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	27 e2       	ldi	r18, 0x27	; 39
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	22 60       	ori	r18, 0x02	; 2
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
    14cc:	87 e2       	ldi	r24, 0x27	; 39
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	27 e2       	ldi	r18, 0x27	; 39
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	24 60       	ori	r18, 0x04	; 4
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
    14de:	87 e2       	ldi	r24, 0x27	; 39
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	27 e2       	ldi	r18, 0x27	; 39
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	28 60       	ori	r18, 0x08	; 8
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	87 e2       	ldi	r24, 0x27	; 39
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	27 e2       	ldi	r18, 0x27	; 39
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	f9 01       	movw	r30, r18
    14fa:	20 81       	ld	r18, Z
    14fc:	20 61       	ori	r18, 0x10	; 16
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
    1502:	87 e2       	ldi	r24, 0x27	; 39
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	27 e2       	ldi	r18, 0x27	; 39
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	f9 01       	movw	r30, r18
    150c:	20 81       	ld	r18, Z
    150e:	20 62       	ori	r18, 0x20	; 32
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
    1514:	88 e2       	ldi	r24, 0x28	; 40
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	28 e2       	ldi	r18, 0x28	; 40
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	20 81       	ld	r18, Z
    1520:	24 60       	ori	r18, 0x04	; 4
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
    1526:	88 e2       	ldi	r24, 0x28	; 40
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	28 e2       	ldi	r18, 0x28	; 40
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	22 60       	ori	r18, 0x02	; 2
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 e2       	ldi	r26, 0x20	; 32
    153e:	b1 e4       	ldi	r27, 0x41	; 65
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	ab 83       	std	Y+3, r26	; 0x03
    1546:	bc 83       	std	Y+4, r27	; 0x04
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a e7       	ldi	r20, 0x7A	; 122
    154e:	53 e4       	ldi	r21, 0x43	; 67
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	7a 81       	ldd	r23, Y+2	; 0x02
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8b 8b       	std	Y+19, r24	; 0x13
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	ad 8b       	std	Y+21, r26	; 0x15
    1566:	be 8b       	std	Y+22, r27	; 0x16
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	6b 89       	ldd	r22, Y+19	; 0x13
    1572:	7c 89       	ldd	r23, Y+20	; 0x14
    1574:	8d 89       	ldd	r24, Y+21	; 0x15
    1576:	9e 89       	ldd	r25, Y+22	; 0x16
    1578:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    157c:	88 23       	and	r24, r24
    157e:	2c f4       	brge	.+10     	; 0x158a <nokia_lcd_init+0xe8>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	98 8f       	std	Y+24, r25	; 0x18
    1586:	8f 8b       	std	Y+23, r24	; 0x17
    1588:	3f c0       	rjmp	.+126    	; 0x1608 <nokia_lcd_init+0x166>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	6b 89       	ldd	r22, Y+19	; 0x13
    1594:	7c 89       	ldd	r23, Y+20	; 0x14
    1596:	8d 89       	ldd	r24, Y+21	; 0x15
    1598:	9e 89       	ldd	r25, Y+22	; 0x16
    159a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__gesf2>
    159e:	18 16       	cp	r1, r24
    15a0:	4c f5       	brge	.+82     	; 0x15f4 <nokia_lcd_init+0x152>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	69 81       	ldd	r22, Y+1	; 0x01
    15ac:	7a 81       	ldd	r23, Y+2	; 0x02
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	98 8f       	std	Y+24, r25	; 0x18
    15c8:	8f 8b       	std	Y+23, r24	; 0x17
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <nokia_lcd_init+0x148>
    15cc:	89 e1       	ldi	r24, 0x19	; 25
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9a 8f       	std	Y+26, r25	; 0x1a
    15d2:	89 8f       	std	Y+25, r24	; 0x19
    15d4:	89 8d       	ldd	r24, Y+25	; 0x19
    15d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <nokia_lcd_init+0x136>
    15dc:	9a 8f       	std	Y+26, r25	; 0x1a
    15de:	89 8f       	std	Y+25, r24	; 0x19
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	98 8f       	std	Y+24, r25	; 0x18
    15e8:	8f 8b       	std	Y+23, r24	; 0x17
    15ea:	8f 89       	ldd	r24, Y+23	; 0x17
    15ec:	98 8d       	ldd	r25, Y+24	; 0x18
    15ee:	89 2b       	or	r24, r25
    15f0:	69 f7       	brne	.-38     	; 0x15cc <nokia_lcd_init+0x12a>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <nokia_lcd_init+0x17a>
    15f4:	6b 89       	ldd	r22, Y+19	; 0x13
    15f6:	7c 89       	ldd	r23, Y+20	; 0x14
    15f8:	8d 89       	ldd	r24, Y+21	; 0x15
    15fa:	9e 89       	ldd	r25, Y+22	; 0x16
    15fc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	98 8f       	std	Y+24, r25	; 0x18
    1606:	8f 8b       	std	Y+23, r24	; 0x17
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	9c 8f       	std	Y+28, r25	; 0x1c
    160e:	8b 8f       	std	Y+27, r24	; 0x1b
    1610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <nokia_lcd_init+0x172>
    1618:	9c 8f       	std	Y+28, r25	; 0x1c
    161a:	8b 8f       	std	Y+27, r24	; 0x1b
    161c:	88 e2       	ldi	r24, 0x28	; 40
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	28 e2       	ldi	r18, 0x28	; 40
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	20 81       	ld	r18, Z
    1628:	2b 7f       	andi	r18, 0xFB	; 251
    162a:	fc 01       	movw	r30, r24
    162c:	20 83       	st	Z, r18
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	ac e8       	ldi	r26, 0x8C	; 140
    1634:	b2 e4       	ldi	r27, 0x42	; 66
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	af 83       	std	Y+7, r26	; 0x07
    163c:	b8 87       	std	Y+8, r27	; 0x08
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	4a e7       	ldi	r20, 0x7A	; 122
    1644:	53 e4       	ldi	r21, 0x43	; 67
    1646:	6d 81       	ldd	r22, Y+5	; 0x05
    1648:	7e 81       	ldd	r23, Y+6	; 0x06
    164a:	8f 81       	ldd	r24, Y+7	; 0x07
    164c:	98 85       	ldd	r25, Y+8	; 0x08
    164e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	89 87       	std	Y+9, r24	; 0x09
    1658:	9a 87       	std	Y+10, r25	; 0x0a
    165a:	ab 87       	std	Y+11, r26	; 0x0b
    165c:	bc 87       	std	Y+12, r27	; 0x0c
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	69 85       	ldd	r22, Y+9	; 0x09
    1668:	7a 85       	ldd	r23, Y+10	; 0x0a
    166a:	8b 85       	ldd	r24, Y+11	; 0x0b
    166c:	9c 85       	ldd	r25, Y+12	; 0x0c
    166e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__cmpsf2>
    1672:	88 23       	and	r24, r24
    1674:	2c f4       	brge	.+10     	; 0x1680 <nokia_lcd_init+0x1de>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9e 87       	std	Y+14, r25	; 0x0e
    167c:	8d 87       	std	Y+13, r24	; 0x0d
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <nokia_lcd_init+0x25c>
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	57 e4       	ldi	r21, 0x47	; 71
    1688:	69 85       	ldd	r22, Y+9	; 0x09
    168a:	7a 85       	ldd	r23, Y+10	; 0x0a
    168c:	8b 85       	ldd	r24, Y+11	; 0x0b
    168e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1690:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <__gesf2>
    1694:	18 16       	cp	r1, r24
    1696:	4c f5       	brge	.+82     	; 0x16ea <nokia_lcd_init+0x248>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e2       	ldi	r20, 0x20	; 32
    169e:	51 e4       	ldi	r21, 0x41	; 65
    16a0:	6d 81       	ldd	r22, Y+5	; 0x05
    16a2:	7e 81       	ldd	r23, Y+6	; 0x06
    16a4:	8f 81       	ldd	r24, Y+7	; 0x07
    16a6:	98 85       	ldd	r25, Y+8	; 0x08
    16a8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e 87       	std	Y+14, r25	; 0x0e
    16be:	8d 87       	std	Y+13, r24	; 0x0d
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <nokia_lcd_init+0x23e>
    16c2:	89 e1       	ldi	r24, 0x19	; 25
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	98 8b       	std	Y+16, r25	; 0x10
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
    16ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    16cc:	98 89       	ldd	r25, Y+16	; 0x10
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <nokia_lcd_init+0x22c>
    16d2:	98 8b       	std	Y+16, r25	; 0x10
    16d4:	8f 87       	std	Y+15, r24	; 0x0f
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	9e 87       	std	Y+14, r25	; 0x0e
    16de:	8d 87       	std	Y+13, r24	; 0x0d
    16e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e4:	89 2b       	or	r24, r25
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <nokia_lcd_init+0x220>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <nokia_lcd_init+0x270>
    16ea:	69 85       	ldd	r22, Y+9	; 0x09
    16ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    16ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 87       	std	Y+14, r25	; 0x0e
    16fc:	8d 87       	std	Y+13, r24	; 0x0d
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	9a 8b       	std	Y+18, r25	; 0x12
    1704:	89 8b       	std	Y+17, r24	; 0x11
    1706:	89 89       	ldd	r24, Y+17	; 0x11
    1708:	9a 89       	ldd	r25, Y+18	; 0x12
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <nokia_lcd_init+0x268>
    170e:	9a 8b       	std	Y+18, r25	; 0x12
    1710:	89 8b       	std	Y+17, r24	; 0x11
    1712:	88 e2       	ldi	r24, 0x28	; 40
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	28 e2       	ldi	r18, 0x28	; 40
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	f9 01       	movw	r30, r18
    171c:	20 81       	ld	r18, Z
    171e:	24 60       	ori	r18, 0x04	; 4
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	88 e2       	ldi	r24, 0x28	; 40
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	28 e2       	ldi	r18, 0x28	; 40
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	f9 01       	movw	r30, r18
    172e:	20 81       	ld	r18, Z
    1730:	2d 7f       	andi	r18, 0xFD	; 253
    1732:	fc 01       	movw	r30, r24
    1734:	20 83       	st	Z, r18
    1736:	81 e2       	ldi	r24, 0x21	; 33
    1738:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    173c:	83 e1       	ldi	r24, 0x13	; 19
    173e:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1742:	86 e0       	ldi	r24, 0x06	; 6
    1744:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1748:	82 ec       	ldi	r24, 0xC2	; 194
    174a:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1754:	89 e0       	ldi	r24, 0x09	; 9
    1756:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    175a:	80 e8       	ldi	r24, 0x80	; 128
    175c:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1760:	80 e4       	ldi	r24, 0x40	; 64
    1762:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <nokia_lcd_init+0x2d4>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0e 94 42 0a 	call	0x1484	; 0x1484 <write_data>
    1772:	0f 5f       	subi	r16, 0xFF	; 255
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	08 3f       	cpi	r16, 0xF8	; 248
    1778:	f1 e0       	ldi	r31, 0x01	; 1
    177a:	1f 07       	cpc	r17, r31
    177c:	b8 f3       	brcs	.-18     	; 0x176c <nokia_lcd_init+0x2ca>
    177e:	88 e0       	ldi	r24, 0x08	; 8
    1780:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    1784:	8c e0       	ldi	r24, 0x0C	; 12
    1786:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    178a:	00 00       	nop
    178c:	6c 96       	adiw	r28, 0x1c	; 28
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <nokia_lcd_clear>:
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	80 e8       	ldi	r24, 0x80	; 128
    17b0:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    17b4:	80 e4       	ldi	r24, 0x40	; 64
    17b6:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
    17ba:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <nokia_lcd+0x1f8>
    17be:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <nokia_lcd+0x1f9>
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <nokia_lcd_clear+0x34>
    17c8:	c8 01       	movw	r24, r16
    17ca:	81 5a       	subi	r24, 0xA1	; 161
    17cc:	9e 4f       	sbci	r25, 0xFE	; 254
    17ce:	fc 01       	movw	r30, r24
    17d0:	10 82       	st	Z, r1
    17d2:	0f 5f       	subi	r16, 0xFF	; 255
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	08 3f       	cpi	r16, 0xF8	; 248
    17d8:	f1 e0       	ldi	r31, 0x01	; 1
    17da:	1f 07       	cpc	r17, r31
    17dc:	a8 f3       	brcs	.-22     	; 0x17c8 <nokia_lcd_clear+0x26>
    17de:	00 00       	nop
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <nokia_lcd_set_pixel+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <nokia_lcd_set_pixel+0x8>
    17f2:	1f 92       	push	r1
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	6c 83       	std	Y+4, r22	; 0x04
    17fc:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	86 95       	lsr	r24
    1802:	86 95       	lsr	r24
    1804:	86 95       	lsr	r24
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	44 e5       	ldi	r20, 0x54	; 84
    180c:	48 9f       	mul	r20, r24
    180e:	90 01       	movw	r18, r0
    1810:	49 9f       	mul	r20, r25
    1812:	30 0d       	add	r19, r0
    1814:	11 24       	eor	r1, r1
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	82 0f       	add	r24, r18
    181e:	93 1f       	adc	r25, r19
    1820:	81 5a       	subi	r24, 0xA1	; 161
    1822:	9e 4f       	sbci	r25, 0xFE	; 254
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	88 23       	and	r24, r24
    182c:	c9 f0       	breq	.+50     	; 0x1860 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 01       	movw	r18, r24
    1840:	27 70       	andi	r18, 0x07	; 7
    1842:	33 27       	eor	r19, r19
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <nokia_lcd_set_pixel+0x64>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	2a 95       	dec	r18
    1850:	e2 f7       	brpl	.-8      	; 0x184a <nokia_lcd_set_pixel+0x60>
    1852:	84 2b       	or	r24, r20
    1854:	28 2f       	mov	r18, r24
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    185e:	19 c0       	rjmp	.+50     	; 0x1892 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9c 01       	movw	r18, r24
    1872:	27 70       	andi	r18, 0x07	; 7
    1874:	33 27       	eor	r19, r19
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <nokia_lcd_set_pixel+0x96>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	2a 95       	dec	r18
    1882:	e2 f7       	brpl	.-8      	; 0x187c <nokia_lcd_set_pixel+0x92>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	28 2f       	mov	r18, r24
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18
}
    1892:	00 00       	nop
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <nokia_lcd_write_char+0xa>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <nokia_lcd_write_char+0xc>
    18b0:	1f 92       	push	r1
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	8c 83       	std	Y+4, r24	; 0x04
    18b8:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	65 c0       	rjmp	.+202    	; 0x1988 <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	4e c0       	rjmp	.+156    	; 0x195e <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9c 01       	movw	r18, r24
    18ca:	20 52       	subi	r18, 0x20	; 32
    18cc:	31 09       	sbc	r19, r1
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	81 2f       	mov	r24, r17
    18d2:	69 2f       	mov	r22, r25
    18d4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__udivmodqi4>
    18d8:	48 2f       	mov	r20, r24
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	c9 01       	movw	r24, r18
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	82 0f       	add	r24, r18
    18e8:	93 1f       	adc	r25, r19
    18ea:	84 0f       	add	r24, r20
    18ec:	95 1f       	adc	r25, r21
    18ee:	88 59       	subi	r24, 0x98	; 152
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	fc 01       	movw	r30, r24
    18fc:	84 91       	lpm	r24, Z
    18fe:	8b 83       	std	Y+3, r24	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	80 2f       	mov	r24, r16
    190a:	69 2f       	mov	r22, r25
    190c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__udivmodqi4>
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <nokia_lcd_write_char+0x78>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <nokia_lcd_write_char+0x74>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	99 27       	eor	r25, r25
    1926:	89 2b       	or	r24, r25
    1928:	61 f0       	breq	.+24     	; 0x1942 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    192a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <nokia_lcd+0x1f9>
    192e:	98 2f       	mov	r25, r24
    1930:	90 0f       	add	r25, r16
    1932:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <nokia_lcd+0x1f8>
    1936:	81 0f       	add	r24, r17
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	69 2f       	mov	r22, r25
    193c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <nokia_lcd_set_pixel>
    1940:	0b c0       	rjmp	.+22     	; 0x1958 <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1942:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <nokia_lcd+0x1f9>
    1946:	98 2f       	mov	r25, r24
    1948:	90 0f       	add	r25, r16
    194a:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <nokia_lcd+0x1f8>
    194e:	81 0f       	add	r24, r17
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	69 2f       	mov	r22, r25
    1954:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1958:	80 2f       	mov	r24, r16
    195a:	01 e0       	ldi	r16, 0x01	; 1
    195c:	08 0f       	add	r16, r24
    195e:	40 2f       	mov	r20, r16
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	c9 01       	movw	r24, r18
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	82 1b       	sub	r24, r18
    1978:	93 0b       	sbc	r25, r19
    197a:	48 17       	cp	r20, r24
    197c:	59 07       	cpc	r21, r25
    197e:	0c f4       	brge	.+2      	; 0x1982 <nokia_lcd_write_char+0xde>
    1980:	a0 cf       	rjmp	.-192    	; 0x18c2 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1982:	81 2f       	mov	r24, r17
    1984:	11 e0       	ldi	r17, 0x01	; 1
    1986:	18 0f       	add	r17, r24
    1988:	41 2f       	mov	r20, r17
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	c9 01       	movw	r24, r18
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	82 0f       	add	r24, r18
    199e:	93 1f       	adc	r25, r19
    19a0:	48 17       	cp	r20, r24
    19a2:	59 07       	cpc	r21, r25
    19a4:	0c f4       	brge	.+2      	; 0x19a8 <nokia_lcd_write_char+0x104>
    19a6:	8b cf       	rjmp	.-234    	; 0x18be <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    19a8:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <nokia_lcd+0x1f8>
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	89 2f       	mov	r24, r25
    19b0:	88 0f       	add	r24, r24
    19b2:	88 0f       	add	r24, r24
    19b4:	89 0f       	add	r24, r25
    19b6:	82 0f       	add	r24, r18
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    19be:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <nokia_lcd+0x1f8>
    19c2:	84 35       	cpi	r24, 0x54	; 84
    19c4:	70 f0       	brcs	.+28     	; 0x19e2 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    19c6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    19ca:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <nokia_lcd+0x1f9>
    19ce:	9d 81       	ldd	r25, Y+5	; 0x05
    19d0:	89 2f       	mov	r24, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	88 0f       	add	r24, r24
    19d6:	88 0f       	add	r24, r24
    19d8:	89 1b       	sub	r24, r25
    19da:	82 0f       	add	r24, r18
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    19e2:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <nokia_lcd+0x1f9>
    19e6:	80 33       	cpi	r24, 0x30	; 48
    19e8:	20 f0       	brcs	.+8      	; 0x19f2 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    19ea:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    19ee:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <nokia_lcd+0x1f9>
	}
}
    19f2:	00 00       	nop
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <nokia_lcd_write_string+0x6>
    1a0e:	1f 92       	push	r1
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1a1a:	0c c0       	rjmp	.+24     	; 0x1a34 <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	9c 01       	movw	r18, r24
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	3a 83       	std	Y+2, r19	; 0x02
    1a28:	29 83       	std	Y+1, r18	; 0x01
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a30:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	fc 01       	movw	r30, r24
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 23       	and	r24, r24
    1a3e:	71 f7       	brne	.-36     	; 0x1a1c <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1a40:	00 00       	nop
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <nokia_lcd_set_cursor+0x6>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <nokia_lcd+0x1f9>
}
    1a68:	00 00       	nop
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1a80:	80 e8       	ldi	r24, 0x80	; 128
    1a82:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>
	write_cmd(0x40);
    1a86:	80 e4       	ldi	r24, 0x40	; 64
    1a88:	0e 94 33 0a 	call	0x1466	; 0x1466 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1a8c:	00 e0       	ldi	r16, 0x00	; 0
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	09 c0       	rjmp	.+18     	; 0x1aa4 <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1a92:	c8 01       	movw	r24, r16
    1a94:	81 5a       	subi	r24, 0xA1	; 161
    1a96:	9e 4f       	sbci	r25, 0xFE	; 254
    1a98:	fc 01       	movw	r30, r24
    1a9a:	80 81       	ld	r24, Z
    1a9c:	0e 94 42 0a 	call	0x1484	; 0x1484 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	08 3f       	cpi	r16, 0xF8	; 248
    1aa6:	f1 e0       	ldi	r31, 0x01	; 1
    1aa8:	1f 07       	cpc	r17, r31
    1aaa:	98 f3       	brcs	.-26     	; 0x1a92 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1aac:	00 00       	nop
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <__cmpsf2>:
    1ab8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__fp_cmp>
    1abc:	08 f4       	brcc	.+2      	; 0x1ac0 <__cmpsf2+0x8>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret

00001ac2 <__fixunssfsi>:
    1ac2:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_splitA>
    1ac6:	88 f0       	brcs	.+34     	; 0x1aea <__fixunssfsi+0x28>
    1ac8:	9f 57       	subi	r25, 0x7F	; 127
    1aca:	98 f0       	brcs	.+38     	; 0x1af2 <__fixunssfsi+0x30>
    1acc:	b9 2f       	mov	r27, r25
    1ace:	99 27       	eor	r25, r25
    1ad0:	b7 51       	subi	r27, 0x17	; 23
    1ad2:	b0 f0       	brcs	.+44     	; 0x1b00 <__fixunssfsi+0x3e>
    1ad4:	e1 f0       	breq	.+56     	; 0x1b0e <__fixunssfsi+0x4c>
    1ad6:	66 0f       	add	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	88 1f       	adc	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	1a f0       	brmi	.+6      	; 0x1ae6 <__fixunssfsi+0x24>
    1ae0:	ba 95       	dec	r27
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__fixunssfsi+0x14>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <__fixunssfsi+0x4c>
    1ae6:	b1 30       	cpi	r27, 0x01	; 1
    1ae8:	91 f0       	breq	.+36     	; 0x1b0e <__fixunssfsi+0x4c>
    1aea:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__fp_zero>
    1aee:	b1 e0       	ldi	r27, 0x01	; 1
    1af0:	08 95       	ret
    1af2:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__fp_zero>
    1af6:	67 2f       	mov	r22, r23
    1af8:	78 2f       	mov	r23, r24
    1afa:	88 27       	eor	r24, r24
    1afc:	b8 5f       	subi	r27, 0xF8	; 248
    1afe:	39 f0       	breq	.+14     	; 0x1b0e <__fixunssfsi+0x4c>
    1b00:	b9 3f       	cpi	r27, 0xF9	; 249
    1b02:	cc f3       	brlt	.-14     	; 0x1af6 <__fixunssfsi+0x34>
    1b04:	86 95       	lsr	r24
    1b06:	77 95       	ror	r23
    1b08:	67 95       	ror	r22
    1b0a:	b3 95       	inc	r27
    1b0c:	d9 f7       	brne	.-10     	; 0x1b04 <__fixunssfsi+0x42>
    1b0e:	3e f4       	brtc	.+14     	; 0x1b1e <__fixunssfsi+0x5c>
    1b10:	90 95       	com	r25
    1b12:	80 95       	com	r24
    1b14:	70 95       	com	r23
    1b16:	61 95       	neg	r22
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	08 95       	ret

00001b20 <__floatunsisf>:
    1b20:	e8 94       	clt
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <__floatsisf+0x12>

00001b24 <__floatsisf>:
    1b24:	97 fb       	bst	r25, 7
    1b26:	3e f4       	brtc	.+14     	; 0x1b36 <__floatsisf+0x12>
    1b28:	90 95       	com	r25
    1b2a:	80 95       	com	r24
    1b2c:	70 95       	com	r23
    1b2e:	61 95       	neg	r22
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	8f 4f       	sbci	r24, 0xFF	; 255
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	99 23       	and	r25, r25
    1b38:	a9 f0       	breq	.+42     	; 0x1b64 <__floatsisf+0x40>
    1b3a:	f9 2f       	mov	r31, r25
    1b3c:	96 e9       	ldi	r25, 0x96	; 150
    1b3e:	bb 27       	eor	r27, r27
    1b40:	93 95       	inc	r25
    1b42:	f6 95       	lsr	r31
    1b44:	87 95       	ror	r24
    1b46:	77 95       	ror	r23
    1b48:	67 95       	ror	r22
    1b4a:	b7 95       	ror	r27
    1b4c:	f1 11       	cpse	r31, r1
    1b4e:	f8 cf       	rjmp	.-16     	; 0x1b40 <__floatsisf+0x1c>
    1b50:	fa f4       	brpl	.+62     	; 0x1b90 <__floatsisf+0x6c>
    1b52:	bb 0f       	add	r27, r27
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <__floatsisf+0x36>
    1b56:	60 ff       	sbrs	r22, 0
    1b58:	1b c0       	rjmp	.+54     	; 0x1b90 <__floatsisf+0x6c>
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	16 c0       	rjmp	.+44     	; 0x1b90 <__floatsisf+0x6c>
    1b64:	88 23       	and	r24, r24
    1b66:	11 f0       	breq	.+4      	; 0x1b6c <__floatsisf+0x48>
    1b68:	96 e9       	ldi	r25, 0x96	; 150
    1b6a:	11 c0       	rjmp	.+34     	; 0x1b8e <__floatsisf+0x6a>
    1b6c:	77 23       	and	r23, r23
    1b6e:	21 f0       	breq	.+8      	; 0x1b78 <__floatsisf+0x54>
    1b70:	9e e8       	ldi	r25, 0x8E	; 142
    1b72:	87 2f       	mov	r24, r23
    1b74:	76 2f       	mov	r23, r22
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <__floatsisf+0x5e>
    1b78:	66 23       	and	r22, r22
    1b7a:	71 f0       	breq	.+28     	; 0x1b98 <__floatsisf+0x74>
    1b7c:	96 e8       	ldi	r25, 0x86	; 134
    1b7e:	86 2f       	mov	r24, r22
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	2a f0       	brmi	.+10     	; 0x1b90 <__floatsisf+0x6c>
    1b86:	9a 95       	dec	r25
    1b88:	66 0f       	add	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	da f7       	brpl	.-10     	; 0x1b86 <__floatsisf+0x62>
    1b90:	88 0f       	add	r24, r24
    1b92:	96 95       	lsr	r25
    1b94:	87 95       	ror	r24
    1b96:	97 f9       	bld	r25, 7
    1b98:	08 95       	ret

00001b9a <__fp_cmp>:
    1b9a:	99 0f       	add	r25, r25
    1b9c:	00 08       	sbc	r0, r0
    1b9e:	55 0f       	add	r21, r21
    1ba0:	aa 0b       	sbc	r26, r26
    1ba2:	e0 e8       	ldi	r30, 0x80	; 128
    1ba4:	fe ef       	ldi	r31, 0xFE	; 254
    1ba6:	16 16       	cp	r1, r22
    1ba8:	17 06       	cpc	r1, r23
    1baa:	e8 07       	cpc	r30, r24
    1bac:	f9 07       	cpc	r31, r25
    1bae:	c0 f0       	brcs	.+48     	; 0x1be0 <__fp_cmp+0x46>
    1bb0:	12 16       	cp	r1, r18
    1bb2:	13 06       	cpc	r1, r19
    1bb4:	e4 07       	cpc	r30, r20
    1bb6:	f5 07       	cpc	r31, r21
    1bb8:	98 f0       	brcs	.+38     	; 0x1be0 <__fp_cmp+0x46>
    1bba:	62 1b       	sub	r22, r18
    1bbc:	73 0b       	sbc	r23, r19
    1bbe:	84 0b       	sbc	r24, r20
    1bc0:	95 0b       	sbc	r25, r21
    1bc2:	39 f4       	brne	.+14     	; 0x1bd2 <__fp_cmp+0x38>
    1bc4:	0a 26       	eor	r0, r26
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <__fp_cmp+0x46>
    1bc8:	23 2b       	or	r18, r19
    1bca:	24 2b       	or	r18, r20
    1bcc:	25 2b       	or	r18, r21
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <__fp_cmp+0x3e>
    1bd0:	08 95       	ret
    1bd2:	0a 26       	eor	r0, r26
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <__fp_cmp+0x3e>
    1bd6:	a1 40       	sbci	r26, 0x01	; 1
    1bd8:	a6 95       	lsr	r26
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	81 1d       	adc	r24, r1
    1bde:	81 1d       	adc	r24, r1
    1be0:	08 95       	ret

00001be2 <__fp_split3>:
    1be2:	57 fd       	sbrc	r21, 7
    1be4:	90 58       	subi	r25, 0x80	; 128
    1be6:	44 0f       	add	r20, r20
    1be8:	55 1f       	adc	r21, r21
    1bea:	59 f0       	breq	.+22     	; 0x1c02 <__fp_splitA+0x10>
    1bec:	5f 3f       	cpi	r21, 0xFF	; 255
    1bee:	71 f0       	breq	.+28     	; 0x1c0c <__fp_splitA+0x1a>
    1bf0:	47 95       	ror	r20

00001bf2 <__fp_splitA>:
    1bf2:	88 0f       	add	r24, r24
    1bf4:	97 fb       	bst	r25, 7
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	61 f0       	breq	.+24     	; 0x1c12 <__fp_splitA+0x20>
    1bfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1bfc:	79 f0       	breq	.+30     	; 0x1c1c <__fp_splitA+0x2a>
    1bfe:	87 95       	ror	r24
    1c00:	08 95       	ret
    1c02:	12 16       	cp	r1, r18
    1c04:	13 06       	cpc	r1, r19
    1c06:	14 06       	cpc	r1, r20
    1c08:	55 1f       	adc	r21, r21
    1c0a:	f2 cf       	rjmp	.-28     	; 0x1bf0 <__fp_split3+0xe>
    1c0c:	46 95       	lsr	r20
    1c0e:	f1 df       	rcall	.-30     	; 0x1bf2 <__fp_splitA>
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <__fp_splitA+0x30>
    1c12:	16 16       	cp	r1, r22
    1c14:	17 06       	cpc	r1, r23
    1c16:	18 06       	cpc	r1, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	f1 cf       	rjmp	.-30     	; 0x1bfe <__fp_splitA+0xc>
    1c1c:	86 95       	lsr	r24
    1c1e:	71 05       	cpc	r23, r1
    1c20:	61 05       	cpc	r22, r1
    1c22:	08 94       	sec
    1c24:	08 95       	ret

00001c26 <__fp_zero>:
    1c26:	e8 94       	clt

00001c28 <__fp_szero>:
    1c28:	bb 27       	eor	r27, r27
    1c2a:	66 27       	eor	r22, r22
    1c2c:	77 27       	eor	r23, r23
    1c2e:	cb 01       	movw	r24, r22
    1c30:	97 f9       	bld	r25, 7
    1c32:	08 95       	ret

00001c34 <__gesf2>:
    1c34:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__fp_cmp>
    1c38:	08 f4       	brcc	.+2      	; 0x1c3c <__gesf2+0x8>
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	08 95       	ret

00001c3e <__mulsf3>:
    1c3e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__mulsf3x>
    1c42:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1c46:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1c4a:	38 f0       	brcs	.+14     	; 0x1c5a <__mulsf3+0x1c>
    1c4c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1c50:	20 f0       	brcs	.+8      	; 0x1c5a <__mulsf3+0x1c>
    1c52:	95 23       	and	r25, r21
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <__mulsf3+0x1c>
    1c56:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1c5a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>
    1c5e:	11 24       	eor	r1, r1
    1c60:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_szero>

00001c64 <__mulsf3x>:
    1c64:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fp_split3>
    1c68:	70 f3       	brcs	.-36     	; 0x1c46 <__mulsf3+0x8>

00001c6a <__mulsf3_pse>:
    1c6a:	95 9f       	mul	r25, r21
    1c6c:	c1 f3       	breq	.-16     	; 0x1c5e <__mulsf3+0x20>
    1c6e:	95 0f       	add	r25, r21
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	55 1f       	adc	r21, r21
    1c74:	62 9f       	mul	r22, r18
    1c76:	f0 01       	movw	r30, r0
    1c78:	72 9f       	mul	r23, r18
    1c7a:	bb 27       	eor	r27, r27
    1c7c:	f0 0d       	add	r31, r0
    1c7e:	b1 1d       	adc	r27, r1
    1c80:	63 9f       	mul	r22, r19
    1c82:	aa 27       	eor	r26, r26
    1c84:	f0 0d       	add	r31, r0
    1c86:	b1 1d       	adc	r27, r1
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	64 9f       	mul	r22, r20
    1c8c:	66 27       	eor	r22, r22
    1c8e:	b0 0d       	add	r27, r0
    1c90:	a1 1d       	adc	r26, r1
    1c92:	66 1f       	adc	r22, r22
    1c94:	82 9f       	mul	r24, r18
    1c96:	22 27       	eor	r18, r18
    1c98:	b0 0d       	add	r27, r0
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	62 1f       	adc	r22, r18
    1c9e:	73 9f       	mul	r23, r19
    1ca0:	b0 0d       	add	r27, r0
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	62 1f       	adc	r22, r18
    1ca6:	83 9f       	mul	r24, r19
    1ca8:	a0 0d       	add	r26, r0
    1caa:	61 1d       	adc	r22, r1
    1cac:	22 1f       	adc	r18, r18
    1cae:	74 9f       	mul	r23, r20
    1cb0:	33 27       	eor	r19, r19
    1cb2:	a0 0d       	add	r26, r0
    1cb4:	61 1d       	adc	r22, r1
    1cb6:	23 1f       	adc	r18, r19
    1cb8:	84 9f       	mul	r24, r20
    1cba:	60 0d       	add	r22, r0
    1cbc:	21 1d       	adc	r18, r1
    1cbe:	82 2f       	mov	r24, r18
    1cc0:	76 2f       	mov	r23, r22
    1cc2:	6a 2f       	mov	r22, r26
    1cc4:	11 24       	eor	r1, r1
    1cc6:	9f 57       	subi	r25, 0x7F	; 127
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	9a f0       	brmi	.+38     	; 0x1cf2 <__mulsf3_pse+0x88>
    1ccc:	f1 f0       	breq	.+60     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cce:	88 23       	and	r24, r24
    1cd0:	4a f0       	brmi	.+18     	; 0x1ce4 <__mulsf3_pse+0x7a>
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	66 1f       	adc	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	88 1f       	adc	r24, r24
    1cde:	91 50       	subi	r25, 0x01	; 1
    1ce0:	50 40       	sbci	r21, 0x00	; 0
    1ce2:	a9 f7       	brne	.-22     	; 0x1cce <__mulsf3_pse+0x64>
    1ce4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	80 f0       	brcs	.+32     	; 0x1d0a <__mulsf3_pse+0xa0>
    1cea:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1cee:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_szero>
    1cf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf4:	e4 f3       	brlt	.-8      	; 0x1cee <__mulsf3_pse+0x84>
    1cf6:	98 3e       	cpi	r25, 0xE8	; 232
    1cf8:	d4 f3       	brlt	.-12     	; 0x1cee <__mulsf3_pse+0x84>
    1cfa:	86 95       	lsr	r24
    1cfc:	77 95       	ror	r23
    1cfe:	67 95       	ror	r22
    1d00:	b7 95       	ror	r27
    1d02:	f7 95       	ror	r31
    1d04:	e7 95       	ror	r30
    1d06:	9f 5f       	subi	r25, 0xFF	; 255
    1d08:	c1 f7       	brne	.-16     	; 0x1cfa <__mulsf3_pse+0x90>
    1d0a:	fe 2b       	or	r31, r30
    1d0c:	88 0f       	add	r24, r24
    1d0e:	91 1d       	adc	r25, r1
    1d10:	96 95       	lsr	r25
    1d12:	87 95       	ror	r24
    1d14:	97 f9       	bld	r25, 7
    1d16:	08 95       	ret

00001d18 <__fp_inf>:
    1d18:	97 f9       	bld	r25, 7
    1d1a:	9f 67       	ori	r25, 0x7F	; 127
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	08 95       	ret

00001d24 <__fp_nan>:
    1d24:	9f ef       	ldi	r25, 0xFF	; 255
    1d26:	80 ec       	ldi	r24, 0xC0	; 192
    1d28:	08 95       	ret

00001d2a <__fp_pscA>:
    1d2a:	00 24       	eor	r0, r0
    1d2c:	0a 94       	dec	r0
    1d2e:	16 16       	cp	r1, r22
    1d30:	17 06       	cpc	r1, r23
    1d32:	18 06       	cpc	r1, r24
    1d34:	09 06       	cpc	r0, r25
    1d36:	08 95       	ret

00001d38 <__fp_pscB>:
    1d38:	00 24       	eor	r0, r0
    1d3a:	0a 94       	dec	r0
    1d3c:	12 16       	cp	r1, r18
    1d3e:	13 06       	cpc	r1, r19
    1d40:	14 06       	cpc	r1, r20
    1d42:	05 06       	cpc	r0, r21
    1d44:	08 95       	ret

00001d46 <__fp_round>:
    1d46:	09 2e       	mov	r0, r25
    1d48:	03 94       	inc	r0
    1d4a:	00 0c       	add	r0, r0
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__fp_round+0xc>
    1d4e:	88 23       	and	r24, r24
    1d50:	52 f0       	brmi	.+20     	; 0x1d66 <__fp_round+0x20>
    1d52:	bb 0f       	add	r27, r27
    1d54:	40 f4       	brcc	.+16     	; 0x1d66 <__fp_round+0x20>
    1d56:	bf 2b       	or	r27, r31
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__fp_round+0x18>
    1d5a:	60 ff       	sbrs	r22, 0
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__fp_round+0x20>
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	08 95       	ret

00001d68 <__udivmodqi4>:
    1d68:	99 1b       	sub	r25, r25
    1d6a:	79 e0       	ldi	r23, 0x09	; 9
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <__udivmodqi4_ep>

00001d6e <__udivmodqi4_loop>:
    1d6e:	99 1f       	adc	r25, r25
    1d70:	96 17       	cp	r25, r22
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <__udivmodqi4_ep>
    1d74:	96 1b       	sub	r25, r22

00001d76 <__udivmodqi4_ep>:
    1d76:	88 1f       	adc	r24, r24
    1d78:	7a 95       	dec	r23
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <__udivmodqi4_loop>
    1d7c:	80 95       	com	r24
    1d7e:	08 95       	ret

00001d80 <__udivmodsi4>:
    1d80:	a1 e2       	ldi	r26, 0x21	; 33
    1d82:	1a 2e       	mov	r1, r26
    1d84:	aa 1b       	sub	r26, r26
    1d86:	bb 1b       	sub	r27, r27
    1d88:	fd 01       	movw	r30, r26
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <__udivmodsi4_ep>

00001d8c <__udivmodsi4_loop>:
    1d8c:	aa 1f       	adc	r26, r26
    1d8e:	bb 1f       	adc	r27, r27
    1d90:	ee 1f       	adc	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	a2 17       	cp	r26, r18
    1d96:	b3 07       	cpc	r27, r19
    1d98:	e4 07       	cpc	r30, r20
    1d9a:	f5 07       	cpc	r31, r21
    1d9c:	20 f0       	brcs	.+8      	; 0x1da6 <__udivmodsi4_ep>
    1d9e:	a2 1b       	sub	r26, r18
    1da0:	b3 0b       	sbc	r27, r19
    1da2:	e4 0b       	sbc	r30, r20
    1da4:	f5 0b       	sbc	r31, r21

00001da6 <__udivmodsi4_ep>:
    1da6:	66 1f       	adc	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	1a 94       	dec	r1
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <__udivmodsi4_loop>
    1db2:	60 95       	com	r22
    1db4:	70 95       	com	r23
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	bd 01       	movw	r22, r26
    1dc0:	cf 01       	movw	r24, r30
    1dc2:	08 95       	ret

00001dc4 <__divmodsi4>:
    1dc4:	05 2e       	mov	r0, r21
    1dc6:	97 fb       	bst	r25, 7
    1dc8:	1e f4       	brtc	.+6      	; 0x1dd0 <__divmodsi4+0xc>
    1dca:	00 94       	com	r0
    1dcc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__negsi2>
    1dd0:	57 fd       	sbrc	r21, 7
    1dd2:	07 d0       	rcall	.+14     	; 0x1de2 <__divmodsi4_neg2>
    1dd4:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__udivmodsi4>
    1dd8:	07 fc       	sbrc	r0, 7
    1dda:	03 d0       	rcall	.+6      	; 0x1de2 <__divmodsi4_neg2>
    1ddc:	4e f4       	brtc	.+18     	; 0x1df0 <__divmodsi4_exit>
    1dde:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__negsi2>

00001de2 <__divmodsi4_neg2>:
    1de2:	50 95       	com	r21
    1de4:	40 95       	com	r20
    1de6:	30 95       	com	r19
    1de8:	21 95       	neg	r18
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	4f 4f       	sbci	r20, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255

00001df0 <__divmodsi4_exit>:
    1df0:	08 95       	ret

00001df2 <__negsi2>:
    1df2:	90 95       	com	r25
    1df4:	80 95       	com	r24
    1df6:	70 95       	com	r23
    1df8:	61 95       	neg	r22
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	08 95       	ret

00001e02 <__umulhisi3>:
    1e02:	a2 9f       	mul	r26, r18
    1e04:	b0 01       	movw	r22, r0
    1e06:	b3 9f       	mul	r27, r19
    1e08:	c0 01       	movw	r24, r0
    1e0a:	a3 9f       	mul	r26, r19
    1e0c:	70 0d       	add	r23, r0
    1e0e:	81 1d       	adc	r24, r1
    1e10:	11 24       	eor	r1, r1
    1e12:	91 1d       	adc	r25, r1
    1e14:	b2 9f       	mul	r27, r18
    1e16:	70 0d       	add	r23, r0
    1e18:	81 1d       	adc	r24, r1
    1e1a:	11 24       	eor	r1, r1
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	08 95       	ret

00001e20 <sprintf>:
    1e20:	ae e0       	ldi	r26, 0x0E	; 14
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e1       	ldi	r30, 0x16	; 22
    1e26:	ff e0       	ldi	r31, 0x0F	; 15
    1e28:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x1c>
    1e2c:	0d 89       	ldd	r16, Y+21	; 0x15
    1e2e:	1e 89       	ldd	r17, Y+22	; 0x16
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	8c 83       	std	Y+4, r24	; 0x04
    1e34:	1a 83       	std	Y+2, r17	; 0x02
    1e36:	09 83       	std	Y+1, r16	; 0x01
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	9f e7       	ldi	r25, 0x7F	; 127
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	ae 01       	movw	r20, r28
    1e42:	47 5e       	subi	r20, 0xE7	; 231
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	6f 89       	ldd	r22, Y+23	; 0x17
    1e48:	78 8d       	ldd	r23, Y+24	; 0x18
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <vfprintf>
    1e52:	ef 81       	ldd	r30, Y+7	; 0x07
    1e54:	f8 85       	ldd	r31, Y+8	; 0x08
    1e56:	e0 0f       	add	r30, r16
    1e58:	f1 1f       	adc	r31, r17
    1e5a:	10 82       	st	Z, r1
    1e5c:	2e 96       	adiw	r28, 0x0e	; 14
    1e5e:	e4 e0       	ldi	r30, 0x04	; 4
    1e60:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__epilogue_restores__+0x1c>

00001e64 <vfprintf>:
    1e64:	ab e0       	ldi	r26, 0x0B	; 11
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e8 e3       	ldi	r30, 0x38	; 56
    1e6a:	ff e0       	ldi	r31, 0x0F	; 15
    1e6c:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__>
    1e70:	6c 01       	movw	r12, r24
    1e72:	7b 01       	movw	r14, r22
    1e74:	8a 01       	movw	r16, r20
    1e76:	fc 01       	movw	r30, r24
    1e78:	17 82       	std	Z+7, r1	; 0x07
    1e7a:	16 82       	std	Z+6, r1	; 0x06
    1e7c:	83 81       	ldd	r24, Z+3	; 0x03
    1e7e:	81 ff       	sbrs	r24, 1
    1e80:	cc c1       	rjmp	.+920    	; 0x221a <vfprintf+0x3b6>
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	3c 01       	movw	r6, r24
    1e88:	f6 01       	movw	r30, r12
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	f7 01       	movw	r30, r14
    1e8e:	93 fd       	sbrc	r25, 3
    1e90:	85 91       	lpm	r24, Z+
    1e92:	93 ff       	sbrs	r25, 3
    1e94:	81 91       	ld	r24, Z+
    1e96:	7f 01       	movw	r14, r30
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <vfprintf+0x3a>
    1e9c:	ba c1       	rjmp	.+884    	; 0x2212 <vfprintf+0x3ae>
    1e9e:	85 32       	cpi	r24, 0x25	; 37
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <vfprintf+0x4c>
    1ea2:	93 fd       	sbrc	r25, 3
    1ea4:	85 91       	lpm	r24, Z+
    1ea6:	93 ff       	sbrs	r25, 3
    1ea8:	81 91       	ld	r24, Z+
    1eaa:	7f 01       	movw	r14, r30
    1eac:	85 32       	cpi	r24, 0x25	; 37
    1eae:	29 f4       	brne	.+10     	; 0x1eba <vfprintf+0x56>
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    1eb8:	e7 cf       	rjmp	.-50     	; 0x1e88 <vfprintf+0x24>
    1eba:	91 2c       	mov	r9, r1
    1ebc:	21 2c       	mov	r2, r1
    1ebe:	31 2c       	mov	r3, r1
    1ec0:	ff e1       	ldi	r31, 0x1F	; 31
    1ec2:	f3 15       	cp	r31, r3
    1ec4:	d8 f0       	brcs	.+54     	; 0x1efc <vfprintf+0x98>
    1ec6:	8b 32       	cpi	r24, 0x2B	; 43
    1ec8:	79 f0       	breq	.+30     	; 0x1ee8 <vfprintf+0x84>
    1eca:	38 f4       	brcc	.+14     	; 0x1eda <vfprintf+0x76>
    1ecc:	80 32       	cpi	r24, 0x20	; 32
    1ece:	79 f0       	breq	.+30     	; 0x1eee <vfprintf+0x8a>
    1ed0:	83 32       	cpi	r24, 0x23	; 35
    1ed2:	a1 f4       	brne	.+40     	; 0x1efc <vfprintf+0x98>
    1ed4:	23 2d       	mov	r18, r3
    1ed6:	20 61       	ori	r18, 0x10	; 16
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <vfprintf+0xb0>
    1eda:	8d 32       	cpi	r24, 0x2D	; 45
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <vfprintf+0x92>
    1ede:	80 33       	cpi	r24, 0x30	; 48
    1ee0:	69 f4       	brne	.+26     	; 0x1efc <vfprintf+0x98>
    1ee2:	23 2d       	mov	r18, r3
    1ee4:	21 60       	ori	r18, 0x01	; 1
    1ee6:	16 c0       	rjmp	.+44     	; 0x1f14 <vfprintf+0xb0>
    1ee8:	83 2d       	mov	r24, r3
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	38 2e       	mov	r3, r24
    1eee:	e3 2d       	mov	r30, r3
    1ef0:	e4 60       	ori	r30, 0x04	; 4
    1ef2:	3e 2e       	mov	r3, r30
    1ef4:	2a c0       	rjmp	.+84     	; 0x1f4a <vfprintf+0xe6>
    1ef6:	f3 2d       	mov	r31, r3
    1ef8:	f8 60       	ori	r31, 0x08	; 8
    1efa:	1d c0       	rjmp	.+58     	; 0x1f36 <vfprintf+0xd2>
    1efc:	37 fc       	sbrc	r3, 7
    1efe:	2d c0       	rjmp	.+90     	; 0x1f5a <vfprintf+0xf6>
    1f00:	20 ed       	ldi	r18, 0xD0	; 208
    1f02:	28 0f       	add	r18, r24
    1f04:	2a 30       	cpi	r18, 0x0A	; 10
    1f06:	40 f0       	brcs	.+16     	; 0x1f18 <vfprintf+0xb4>
    1f08:	8e 32       	cpi	r24, 0x2E	; 46
    1f0a:	b9 f4       	brne	.+46     	; 0x1f3a <vfprintf+0xd6>
    1f0c:	36 fc       	sbrc	r3, 6
    1f0e:	81 c1       	rjmp	.+770    	; 0x2212 <vfprintf+0x3ae>
    1f10:	23 2d       	mov	r18, r3
    1f12:	20 64       	ori	r18, 0x40	; 64
    1f14:	32 2e       	mov	r3, r18
    1f16:	19 c0       	rjmp	.+50     	; 0x1f4a <vfprintf+0xe6>
    1f18:	36 fe       	sbrs	r3, 6
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0xc4>
    1f1c:	8a e0       	ldi	r24, 0x0A	; 10
    1f1e:	98 9e       	mul	r9, r24
    1f20:	20 0d       	add	r18, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	92 2e       	mov	r9, r18
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <vfprintf+0xe6>
    1f28:	ea e0       	ldi	r30, 0x0A	; 10
    1f2a:	2e 9e       	mul	r2, r30
    1f2c:	20 0d       	add	r18, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	22 2e       	mov	r2, r18
    1f32:	f3 2d       	mov	r31, r3
    1f34:	f0 62       	ori	r31, 0x20	; 32
    1f36:	3f 2e       	mov	r3, r31
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <vfprintf+0xe6>
    1f3a:	8c 36       	cpi	r24, 0x6C	; 108
    1f3c:	21 f4       	brne	.+8      	; 0x1f46 <vfprintf+0xe2>
    1f3e:	83 2d       	mov	r24, r3
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	38 2e       	mov	r3, r24
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <vfprintf+0xe6>
    1f46:	88 36       	cpi	r24, 0x68	; 104
    1f48:	41 f4       	brne	.+16     	; 0x1f5a <vfprintf+0xf6>
    1f4a:	f7 01       	movw	r30, r14
    1f4c:	93 fd       	sbrc	r25, 3
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	93 ff       	sbrs	r25, 3
    1f52:	81 91       	ld	r24, Z+
    1f54:	7f 01       	movw	r14, r30
    1f56:	81 11       	cpse	r24, r1
    1f58:	b3 cf       	rjmp	.-154    	; 0x1ec0 <vfprintf+0x5c>
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	9f 7d       	andi	r25, 0xDF	; 223
    1f5e:	95 54       	subi	r25, 0x45	; 69
    1f60:	93 30       	cpi	r25, 0x03	; 3
    1f62:	28 f4       	brcc	.+10     	; 0x1f6e <vfprintf+0x10a>
    1f64:	0c 5f       	subi	r16, 0xFC	; 252
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	9f e3       	ldi	r25, 0x3F	; 63
    1f6a:	99 83       	std	Y+1, r25	; 0x01
    1f6c:	0d c0       	rjmp	.+26     	; 0x1f88 <vfprintf+0x124>
    1f6e:	83 36       	cpi	r24, 0x63	; 99
    1f70:	31 f0       	breq	.+12     	; 0x1f7e <vfprintf+0x11a>
    1f72:	83 37       	cpi	r24, 0x73	; 115
    1f74:	71 f0       	breq	.+28     	; 0x1f92 <vfprintf+0x12e>
    1f76:	83 35       	cpi	r24, 0x53	; 83
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <vfprintf+0x118>
    1f7a:	59 c0       	rjmp	.+178    	; 0x202e <vfprintf+0x1ca>
    1f7c:	21 c0       	rjmp	.+66     	; 0x1fc0 <vfprintf+0x15c>
    1f7e:	f8 01       	movw	r30, r16
    1f80:	80 81       	ld	r24, Z
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	0e 5f       	subi	r16, 0xFE	; 254
    1f86:	1f 4f       	sbci	r17, 0xFF	; 255
    1f88:	88 24       	eor	r8, r8
    1f8a:	83 94       	inc	r8
    1f8c:	91 2c       	mov	r9, r1
    1f8e:	53 01       	movw	r10, r6
    1f90:	13 c0       	rjmp	.+38     	; 0x1fb8 <vfprintf+0x154>
    1f92:	28 01       	movw	r4, r16
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	4f 0e       	add	r4, r31
    1f98:	51 1c       	adc	r5, r1
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	a0 80       	ld	r10, Z
    1f9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1fa0:	36 fe       	sbrs	r3, 6
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <vfprintf+0x146>
    1fa4:	69 2d       	mov	r22, r9
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0x14a>
    1faa:	6f ef       	ldi	r22, 0xFF	; 255
    1fac:	7f ef       	ldi	r23, 0xFF	; 255
    1fae:	c5 01       	movw	r24, r10
    1fb0:	0e 94 1e 11 	call	0x223c	; 0x223c <strnlen>
    1fb4:	4c 01       	movw	r8, r24
    1fb6:	82 01       	movw	r16, r4
    1fb8:	f3 2d       	mov	r31, r3
    1fba:	ff 77       	andi	r31, 0x7F	; 127
    1fbc:	3f 2e       	mov	r3, r31
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <vfprintf+0x188>
    1fc0:	28 01       	movw	r4, r16
    1fc2:	22 e0       	ldi	r18, 0x02	; 2
    1fc4:	42 0e       	add	r4, r18
    1fc6:	51 1c       	adc	r5, r1
    1fc8:	f8 01       	movw	r30, r16
    1fca:	a0 80       	ld	r10, Z
    1fcc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fce:	36 fe       	sbrs	r3, 6
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <vfprintf+0x174>
    1fd2:	69 2d       	mov	r22, r9
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <vfprintf+0x178>
    1fd8:	6f ef       	ldi	r22, 0xFF	; 255
    1fda:	7f ef       	ldi	r23, 0xFF	; 255
    1fdc:	c5 01       	movw	r24, r10
    1fde:	0e 94 13 11 	call	0x2226	; 0x2226 <strnlen_P>
    1fe2:	4c 01       	movw	r8, r24
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	f0 68       	ori	r31, 0x80	; 128
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	82 01       	movw	r16, r4
    1fec:	33 fc       	sbrc	r3, 3
    1fee:	1b c0       	rjmp	.+54     	; 0x2026 <vfprintf+0x1c2>
    1ff0:	82 2d       	mov	r24, r2
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	88 16       	cp	r8, r24
    1ff6:	99 06       	cpc	r9, r25
    1ff8:	b0 f4       	brcc	.+44     	; 0x2026 <vfprintf+0x1c2>
    1ffa:	b6 01       	movw	r22, r12
    1ffc:	80 e2       	ldi	r24, 0x20	; 32
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    2004:	2a 94       	dec	r2
    2006:	f4 cf       	rjmp	.-24     	; 0x1ff0 <vfprintf+0x18c>
    2008:	f5 01       	movw	r30, r10
    200a:	37 fc       	sbrc	r3, 7
    200c:	85 91       	lpm	r24, Z+
    200e:	37 fe       	sbrs	r3, 7
    2010:	81 91       	ld	r24, Z+
    2012:	5f 01       	movw	r10, r30
    2014:	b6 01       	movw	r22, r12
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    201c:	21 10       	cpse	r2, r1
    201e:	2a 94       	dec	r2
    2020:	21 e0       	ldi	r18, 0x01	; 1
    2022:	82 1a       	sub	r8, r18
    2024:	91 08       	sbc	r9, r1
    2026:	81 14       	cp	r8, r1
    2028:	91 04       	cpc	r9, r1
    202a:	71 f7       	brne	.-36     	; 0x2008 <vfprintf+0x1a4>
    202c:	e8 c0       	rjmp	.+464    	; 0x21fe <vfprintf+0x39a>
    202e:	84 36       	cpi	r24, 0x64	; 100
    2030:	11 f0       	breq	.+4      	; 0x2036 <vfprintf+0x1d2>
    2032:	89 36       	cpi	r24, 0x69	; 105
    2034:	41 f5       	brne	.+80     	; 0x2086 <vfprintf+0x222>
    2036:	f8 01       	movw	r30, r16
    2038:	37 fe       	sbrs	r3, 7
    203a:	07 c0       	rjmp	.+14     	; 0x204a <vfprintf+0x1e6>
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	0c 5f       	subi	r16, 0xFC	; 252
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	08 c0       	rjmp	.+16     	; 0x205a <vfprintf+0x1f6>
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	07 2e       	mov	r0, r23
    2050:	00 0c       	add	r0, r0
    2052:	88 0b       	sbc	r24, r24
    2054:	99 0b       	sbc	r25, r25
    2056:	0e 5f       	subi	r16, 0xFE	; 254
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	f3 2d       	mov	r31, r3
    205c:	ff 76       	andi	r31, 0x6F	; 111
    205e:	3f 2e       	mov	r3, r31
    2060:	97 ff       	sbrs	r25, 7
    2062:	09 c0       	rjmp	.+18     	; 0x2076 <vfprintf+0x212>
    2064:	90 95       	com	r25
    2066:	80 95       	com	r24
    2068:	70 95       	com	r23
    206a:	61 95       	neg	r22
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	f0 68       	ori	r31, 0x80	; 128
    2074:	3f 2e       	mov	r3, r31
    2076:	2a e0       	ldi	r18, 0x0A	; 10
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	a3 01       	movw	r20, r6
    207c:	0e 94 65 11 	call	0x22ca	; 0x22ca <__ultoa_invert>
    2080:	88 2e       	mov	r8, r24
    2082:	86 18       	sub	r8, r6
    2084:	45 c0       	rjmp	.+138    	; 0x2110 <vfprintf+0x2ac>
    2086:	85 37       	cpi	r24, 0x75	; 117
    2088:	31 f4       	brne	.+12     	; 0x2096 <vfprintf+0x232>
    208a:	23 2d       	mov	r18, r3
    208c:	2f 7e       	andi	r18, 0xEF	; 239
    208e:	b2 2e       	mov	r11, r18
    2090:	2a e0       	ldi	r18, 0x0A	; 10
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	25 c0       	rjmp	.+74     	; 0x20e0 <vfprintf+0x27c>
    2096:	93 2d       	mov	r25, r3
    2098:	99 7f       	andi	r25, 0xF9	; 249
    209a:	b9 2e       	mov	r11, r25
    209c:	8f 36       	cpi	r24, 0x6F	; 111
    209e:	c1 f0       	breq	.+48     	; 0x20d0 <vfprintf+0x26c>
    20a0:	18 f4       	brcc	.+6      	; 0x20a8 <vfprintf+0x244>
    20a2:	88 35       	cpi	r24, 0x58	; 88
    20a4:	79 f0       	breq	.+30     	; 0x20c4 <vfprintf+0x260>
    20a6:	b5 c0       	rjmp	.+362    	; 0x2212 <vfprintf+0x3ae>
    20a8:	80 37       	cpi	r24, 0x70	; 112
    20aa:	19 f0       	breq	.+6      	; 0x20b2 <vfprintf+0x24e>
    20ac:	88 37       	cpi	r24, 0x78	; 120
    20ae:	21 f0       	breq	.+8      	; 0x20b8 <vfprintf+0x254>
    20b0:	b0 c0       	rjmp	.+352    	; 0x2212 <vfprintf+0x3ae>
    20b2:	e9 2f       	mov	r30, r25
    20b4:	e0 61       	ori	r30, 0x10	; 16
    20b6:	be 2e       	mov	r11, r30
    20b8:	b4 fe       	sbrs	r11, 4
    20ba:	0d c0       	rjmp	.+26     	; 0x20d6 <vfprintf+0x272>
    20bc:	fb 2d       	mov	r31, r11
    20be:	f4 60       	ori	r31, 0x04	; 4
    20c0:	bf 2e       	mov	r11, r31
    20c2:	09 c0       	rjmp	.+18     	; 0x20d6 <vfprintf+0x272>
    20c4:	34 fe       	sbrs	r3, 4
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <vfprintf+0x278>
    20c8:	29 2f       	mov	r18, r25
    20ca:	26 60       	ori	r18, 0x06	; 6
    20cc:	b2 2e       	mov	r11, r18
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <vfprintf+0x278>
    20d0:	28 e0       	ldi	r18, 0x08	; 8
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <vfprintf+0x27c>
    20d6:	20 e1       	ldi	r18, 0x10	; 16
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <vfprintf+0x27c>
    20dc:	20 e1       	ldi	r18, 0x10	; 16
    20de:	32 e0       	ldi	r19, 0x02	; 2
    20e0:	f8 01       	movw	r30, r16
    20e2:	b7 fe       	sbrs	r11, 7
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <vfprintf+0x290>
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	0c 5f       	subi	r16, 0xFC	; 252
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <vfprintf+0x29c>
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 5f       	subi	r16, 0xFE	; 254
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	a3 01       	movw	r20, r6
    2102:	0e 94 65 11 	call	0x22ca	; 0x22ca <__ultoa_invert>
    2106:	88 2e       	mov	r8, r24
    2108:	86 18       	sub	r8, r6
    210a:	fb 2d       	mov	r31, r11
    210c:	ff 77       	andi	r31, 0x7F	; 127
    210e:	3f 2e       	mov	r3, r31
    2110:	36 fe       	sbrs	r3, 6
    2112:	0d c0       	rjmp	.+26     	; 0x212e <vfprintf+0x2ca>
    2114:	23 2d       	mov	r18, r3
    2116:	2e 7f       	andi	r18, 0xFE	; 254
    2118:	a2 2e       	mov	r10, r18
    211a:	89 14       	cp	r8, r9
    211c:	58 f4       	brcc	.+22     	; 0x2134 <vfprintf+0x2d0>
    211e:	34 fe       	sbrs	r3, 4
    2120:	0b c0       	rjmp	.+22     	; 0x2138 <vfprintf+0x2d4>
    2122:	32 fc       	sbrc	r3, 2
    2124:	09 c0       	rjmp	.+18     	; 0x2138 <vfprintf+0x2d4>
    2126:	83 2d       	mov	r24, r3
    2128:	8e 7e       	andi	r24, 0xEE	; 238
    212a:	a8 2e       	mov	r10, r24
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <vfprintf+0x2d4>
    212e:	b8 2c       	mov	r11, r8
    2130:	a3 2c       	mov	r10, r3
    2132:	03 c0       	rjmp	.+6      	; 0x213a <vfprintf+0x2d6>
    2134:	b8 2c       	mov	r11, r8
    2136:	01 c0       	rjmp	.+2      	; 0x213a <vfprintf+0x2d6>
    2138:	b9 2c       	mov	r11, r9
    213a:	a4 fe       	sbrs	r10, 4
    213c:	0f c0       	rjmp	.+30     	; 0x215c <vfprintf+0x2f8>
    213e:	fe 01       	movw	r30, r28
    2140:	e8 0d       	add	r30, r8
    2142:	f1 1d       	adc	r31, r1
    2144:	80 81       	ld	r24, Z
    2146:	80 33       	cpi	r24, 0x30	; 48
    2148:	21 f4       	brne	.+8      	; 0x2152 <vfprintf+0x2ee>
    214a:	9a 2d       	mov	r25, r10
    214c:	99 7e       	andi	r25, 0xE9	; 233
    214e:	a9 2e       	mov	r10, r25
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <vfprintf+0x300>
    2152:	a2 fe       	sbrs	r10, 2
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <vfprintf+0x2fe>
    2156:	b3 94       	inc	r11
    2158:	b3 94       	inc	r11
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <vfprintf+0x300>
    215c:	8a 2d       	mov	r24, r10
    215e:	86 78       	andi	r24, 0x86	; 134
    2160:	09 f0       	breq	.+2      	; 0x2164 <vfprintf+0x300>
    2162:	b3 94       	inc	r11
    2164:	a3 fc       	sbrc	r10, 3
    2166:	11 c0       	rjmp	.+34     	; 0x218a <vfprintf+0x326>
    2168:	a0 fe       	sbrs	r10, 0
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <vfprintf+0x314>
    216c:	b2 14       	cp	r11, r2
    216e:	88 f4       	brcc	.+34     	; 0x2192 <vfprintf+0x32e>
    2170:	28 0c       	add	r2, r8
    2172:	92 2c       	mov	r9, r2
    2174:	9b 18       	sub	r9, r11
    2176:	0e c0       	rjmp	.+28     	; 0x2194 <vfprintf+0x330>
    2178:	b2 14       	cp	r11, r2
    217a:	60 f4       	brcc	.+24     	; 0x2194 <vfprintf+0x330>
    217c:	b6 01       	movw	r22, r12
    217e:	80 e2       	ldi	r24, 0x20	; 32
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    2186:	b3 94       	inc	r11
    2188:	f7 cf       	rjmp	.-18     	; 0x2178 <vfprintf+0x314>
    218a:	b2 14       	cp	r11, r2
    218c:	18 f4       	brcc	.+6      	; 0x2194 <vfprintf+0x330>
    218e:	2b 18       	sub	r2, r11
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <vfprintf+0x332>
    2192:	98 2c       	mov	r9, r8
    2194:	21 2c       	mov	r2, r1
    2196:	a4 fe       	sbrs	r10, 4
    2198:	10 c0       	rjmp	.+32     	; 0x21ba <vfprintf+0x356>
    219a:	b6 01       	movw	r22, r12
    219c:	80 e3       	ldi	r24, 0x30	; 48
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    21a4:	a2 fe       	sbrs	r10, 2
    21a6:	17 c0       	rjmp	.+46     	; 0x21d6 <vfprintf+0x372>
    21a8:	a1 fc       	sbrc	r10, 1
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <vfprintf+0x34e>
    21ac:	88 e7       	ldi	r24, 0x78	; 120
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <vfprintf+0x352>
    21b2:	88 e5       	ldi	r24, 0x58	; 88
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	b6 01       	movw	r22, r12
    21b8:	0c c0       	rjmp	.+24     	; 0x21d2 <vfprintf+0x36e>
    21ba:	8a 2d       	mov	r24, r10
    21bc:	86 78       	andi	r24, 0x86	; 134
    21be:	59 f0       	breq	.+22     	; 0x21d6 <vfprintf+0x372>
    21c0:	a1 fe       	sbrs	r10, 1
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <vfprintf+0x364>
    21c4:	8b e2       	ldi	r24, 0x2B	; 43
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <vfprintf+0x366>
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	a7 fc       	sbrc	r10, 7
    21cc:	8d e2       	ldi	r24, 0x2D	; 45
    21ce:	b6 01       	movw	r22, r12
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    21d6:	89 14       	cp	r8, r9
    21d8:	38 f4       	brcc	.+14     	; 0x21e8 <vfprintf+0x384>
    21da:	b6 01       	movw	r22, r12
    21dc:	80 e3       	ldi	r24, 0x30	; 48
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    21e4:	9a 94       	dec	r9
    21e6:	f7 cf       	rjmp	.-18     	; 0x21d6 <vfprintf+0x372>
    21e8:	8a 94       	dec	r8
    21ea:	f3 01       	movw	r30, r6
    21ec:	e8 0d       	add	r30, r8
    21ee:	f1 1d       	adc	r31, r1
    21f0:	80 81       	ld	r24, Z
    21f2:	b6 01       	movw	r22, r12
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    21fa:	81 10       	cpse	r8, r1
    21fc:	f5 cf       	rjmp	.-22     	; 0x21e8 <vfprintf+0x384>
    21fe:	22 20       	and	r2, r2
    2200:	09 f4       	brne	.+2      	; 0x2204 <vfprintf+0x3a0>
    2202:	42 ce       	rjmp	.-892    	; 0x1e88 <vfprintf+0x24>
    2204:	b6 01       	movw	r22, r12
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 29 11 	call	0x2252	; 0x2252 <fputc>
    220e:	2a 94       	dec	r2
    2210:	f6 cf       	rjmp	.-20     	; 0x21fe <vfprintf+0x39a>
    2212:	f6 01       	movw	r30, r12
    2214:	86 81       	ldd	r24, Z+6	; 0x06
    2216:	97 81       	ldd	r25, Z+7	; 0x07
    2218:	02 c0       	rjmp	.+4      	; 0x221e <vfprintf+0x3ba>
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	2b 96       	adiw	r28, 0x0b	; 11
    2220:	e2 e1       	ldi	r30, 0x12	; 18
    2222:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__>

00002226 <strnlen_P>:
    2226:	fc 01       	movw	r30, r24
    2228:	05 90       	lpm	r0, Z+
    222a:	61 50       	subi	r22, 0x01	; 1
    222c:	70 40       	sbci	r23, 0x00	; 0
    222e:	01 10       	cpse	r0, r1
    2230:	d8 f7       	brcc	.-10     	; 0x2228 <strnlen_P+0x2>
    2232:	80 95       	com	r24
    2234:	90 95       	com	r25
    2236:	8e 0f       	add	r24, r30
    2238:	9f 1f       	adc	r25, r31
    223a:	08 95       	ret

0000223c <strnlen>:
    223c:	fc 01       	movw	r30, r24
    223e:	61 50       	subi	r22, 0x01	; 1
    2240:	70 40       	sbci	r23, 0x00	; 0
    2242:	01 90       	ld	r0, Z+
    2244:	01 10       	cpse	r0, r1
    2246:	d8 f7       	brcc	.-10     	; 0x223e <strnlen+0x2>
    2248:	80 95       	com	r24
    224a:	90 95       	com	r25
    224c:	8e 0f       	add	r24, r30
    224e:	9f 1f       	adc	r25, r31
    2250:	08 95       	ret

00002252 <fputc>:
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	fb 01       	movw	r30, r22
    225c:	23 81       	ldd	r18, Z+3	; 0x03
    225e:	21 fd       	sbrc	r18, 1
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <fputc+0x16>
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	9f ef       	ldi	r25, 0xFF	; 255
    2266:	2c c0       	rjmp	.+88     	; 0x22c0 <fputc+0x6e>
    2268:	22 ff       	sbrs	r18, 2
    226a:	16 c0       	rjmp	.+44     	; 0x2298 <fputc+0x46>
    226c:	46 81       	ldd	r20, Z+6	; 0x06
    226e:	57 81       	ldd	r21, Z+7	; 0x07
    2270:	24 81       	ldd	r18, Z+4	; 0x04
    2272:	35 81       	ldd	r19, Z+5	; 0x05
    2274:	42 17       	cp	r20, r18
    2276:	53 07       	cpc	r21, r19
    2278:	44 f4       	brge	.+16     	; 0x228a <fputc+0x38>
    227a:	a0 81       	ld	r26, Z
    227c:	b1 81       	ldd	r27, Z+1	; 0x01
    227e:	9d 01       	movw	r18, r26
    2280:	2f 5f       	subi	r18, 0xFF	; 255
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	31 83       	std	Z+1, r19	; 0x01
    2286:	20 83       	st	Z, r18
    2288:	8c 93       	st	X, r24
    228a:	26 81       	ldd	r18, Z+6	; 0x06
    228c:	37 81       	ldd	r19, Z+7	; 0x07
    228e:	2f 5f       	subi	r18, 0xFF	; 255
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	37 83       	std	Z+7, r19	; 0x07
    2294:	26 83       	std	Z+6, r18	; 0x06
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <fputc+0x6e>
    2298:	8b 01       	movw	r16, r22
    229a:	ec 01       	movw	r28, r24
    229c:	fb 01       	movw	r30, r22
    229e:	00 84       	ldd	r0, Z+8	; 0x08
    22a0:	f1 85       	ldd	r31, Z+9	; 0x09
    22a2:	e0 2d       	mov	r30, r0
    22a4:	09 95       	icall
    22a6:	89 2b       	or	r24, r25
    22a8:	e1 f6       	brne	.-72     	; 0x2262 <fputc+0x10>
    22aa:	d8 01       	movw	r26, r16
    22ac:	16 96       	adiw	r26, 0x06	; 6
    22ae:	8d 91       	ld	r24, X+
    22b0:	9c 91       	ld	r25, X
    22b2:	17 97       	sbiw	r26, 0x07	; 7
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	17 96       	adiw	r26, 0x07	; 7
    22b8:	9c 93       	st	X, r25
    22ba:	8e 93       	st	-X, r24
    22bc:	16 97       	sbiw	r26, 0x06	; 6
    22be:	ce 01       	movw	r24, r28
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <__ultoa_invert>:
    22ca:	fa 01       	movw	r30, r20
    22cc:	aa 27       	eor	r26, r26
    22ce:	28 30       	cpi	r18, 0x08	; 8
    22d0:	51 f1       	breq	.+84     	; 0x2326 <__ultoa_invert+0x5c>
    22d2:	20 31       	cpi	r18, 0x10	; 16
    22d4:	81 f1       	breq	.+96     	; 0x2336 <__ultoa_invert+0x6c>
    22d6:	e8 94       	clt
    22d8:	6f 93       	push	r22
    22da:	6e 7f       	andi	r22, 0xFE	; 254
    22dc:	6e 5f       	subi	r22, 0xFE	; 254
    22de:	7f 4f       	sbci	r23, 0xFF	; 255
    22e0:	8f 4f       	sbci	r24, 0xFF	; 255
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	af 4f       	sbci	r26, 0xFF	; 255
    22e6:	b1 e0       	ldi	r27, 0x01	; 1
    22e8:	3e d0       	rcall	.+124    	; 0x2366 <__ultoa_invert+0x9c>
    22ea:	b4 e0       	ldi	r27, 0x04	; 4
    22ec:	3c d0       	rcall	.+120    	; 0x2366 <__ultoa_invert+0x9c>
    22ee:	67 0f       	add	r22, r23
    22f0:	78 1f       	adc	r23, r24
    22f2:	89 1f       	adc	r24, r25
    22f4:	9a 1f       	adc	r25, r26
    22f6:	a1 1d       	adc	r26, r1
    22f8:	68 0f       	add	r22, r24
    22fa:	79 1f       	adc	r23, r25
    22fc:	8a 1f       	adc	r24, r26
    22fe:	91 1d       	adc	r25, r1
    2300:	a1 1d       	adc	r26, r1
    2302:	6a 0f       	add	r22, r26
    2304:	71 1d       	adc	r23, r1
    2306:	81 1d       	adc	r24, r1
    2308:	91 1d       	adc	r25, r1
    230a:	a1 1d       	adc	r26, r1
    230c:	20 d0       	rcall	.+64     	; 0x234e <__ultoa_invert+0x84>
    230e:	09 f4       	brne	.+2      	; 0x2312 <__ultoa_invert+0x48>
    2310:	68 94       	set
    2312:	3f 91       	pop	r19
    2314:	2a e0       	ldi	r18, 0x0A	; 10
    2316:	26 9f       	mul	r18, r22
    2318:	11 24       	eor	r1, r1
    231a:	30 19       	sub	r19, r0
    231c:	30 5d       	subi	r19, 0xD0	; 208
    231e:	31 93       	st	Z+, r19
    2320:	de f6       	brtc	.-74     	; 0x22d8 <__ultoa_invert+0xe>
    2322:	cf 01       	movw	r24, r30
    2324:	08 95       	ret
    2326:	46 2f       	mov	r20, r22
    2328:	47 70       	andi	r20, 0x07	; 7
    232a:	40 5d       	subi	r20, 0xD0	; 208
    232c:	41 93       	st	Z+, r20
    232e:	b3 e0       	ldi	r27, 0x03	; 3
    2330:	0f d0       	rcall	.+30     	; 0x2350 <__ultoa_invert+0x86>
    2332:	c9 f7       	brne	.-14     	; 0x2326 <__ultoa_invert+0x5c>
    2334:	f6 cf       	rjmp	.-20     	; 0x2322 <__ultoa_invert+0x58>
    2336:	46 2f       	mov	r20, r22
    2338:	4f 70       	andi	r20, 0x0F	; 15
    233a:	40 5d       	subi	r20, 0xD0	; 208
    233c:	4a 33       	cpi	r20, 0x3A	; 58
    233e:	18 f0       	brcs	.+6      	; 0x2346 <__ultoa_invert+0x7c>
    2340:	49 5d       	subi	r20, 0xD9	; 217
    2342:	31 fd       	sbrc	r19, 1
    2344:	40 52       	subi	r20, 0x20	; 32
    2346:	41 93       	st	Z+, r20
    2348:	02 d0       	rcall	.+4      	; 0x234e <__ultoa_invert+0x84>
    234a:	a9 f7       	brne	.-22     	; 0x2336 <__ultoa_invert+0x6c>
    234c:	ea cf       	rjmp	.-44     	; 0x2322 <__ultoa_invert+0x58>
    234e:	b4 e0       	ldi	r27, 0x04	; 4
    2350:	a6 95       	lsr	r26
    2352:	97 95       	ror	r25
    2354:	87 95       	ror	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	ba 95       	dec	r27
    235c:	c9 f7       	brne	.-14     	; 0x2350 <__ultoa_invert+0x86>
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	61 05       	cpc	r22, r1
    2362:	71 05       	cpc	r23, r1
    2364:	08 95       	ret
    2366:	9b 01       	movw	r18, r22
    2368:	ac 01       	movw	r20, r24
    236a:	0a 2e       	mov	r0, r26
    236c:	06 94       	lsr	r0
    236e:	57 95       	ror	r21
    2370:	47 95       	ror	r20
    2372:	37 95       	ror	r19
    2374:	27 95       	ror	r18
    2376:	ba 95       	dec	r27
    2378:	c9 f7       	brne	.-14     	; 0x236c <__ultoa_invert+0xa2>
    237a:	62 0f       	add	r22, r18
    237c:	73 1f       	adc	r23, r19
    237e:	84 1f       	adc	r24, r20
    2380:	95 1f       	adc	r25, r21
    2382:	a0 1d       	adc	r26, r0
    2384:	08 95       	ret

00002386 <__prologue_saves__>:
    2386:	2f 92       	push	r2
    2388:	3f 92       	push	r3
    238a:	4f 92       	push	r4
    238c:	5f 92       	push	r5
    238e:	6f 92       	push	r6
    2390:	7f 92       	push	r7
    2392:	8f 92       	push	r8
    2394:	9f 92       	push	r9
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	ca 1b       	sub	r28, r26
    23b0:	db 0b       	sbc	r29, r27
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	09 94       	ijmp

000023be <__epilogue_restores__>:
    23be:	2a 88       	ldd	r2, Y+18	; 0x12
    23c0:	39 88       	ldd	r3, Y+17	; 0x11
    23c2:	48 88       	ldd	r4, Y+16	; 0x10
    23c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    23cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    23d0:	b9 84       	ldd	r11, Y+9	; 0x09
    23d2:	c8 84       	ldd	r12, Y+8	; 0x08
    23d4:	df 80       	ldd	r13, Y+7	; 0x07
    23d6:	ee 80       	ldd	r14, Y+6	; 0x06
    23d8:	fd 80       	ldd	r15, Y+5	; 0x05
    23da:	0c 81       	ldd	r16, Y+4	; 0x04
    23dc:	1b 81       	ldd	r17, Y+3	; 0x03
    23de:	aa 81       	ldd	r26, Y+2	; 0x02
    23e0:	b9 81       	ldd	r27, Y+1	; 0x01
    23e2:	ce 0f       	add	r28, r30
    23e4:	d1 1d       	adc	r29, r1
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	ed 01       	movw	r28, r26
    23f2:	08 95       	ret

000023f4 <_exit>:
    23f4:	f8 94       	cli

000023f6 <__stop_program>:
    23f6:	ff cf       	rjmp	.-2      	; 0x23f6 <__stop_program>
